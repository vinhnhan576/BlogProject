{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\n\nconst timers_1 = require(\"timers\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\n\nconst commands_1 = require(\"./commands\");\n\nconst message_stream_1 = require(\"./message_stream\");\n\nconst stream_description_1 = require(\"./stream_description\");\n\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\n\n\nconst kStream = Symbol('stream');\n/** @internal */\n\nconst kQueue = Symbol('queue');\n/** @internal */\n\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\n\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\n\nconst kDescription = Symbol('description');\n/** @internal */\n\nconst kHello = Symbol('hello');\n/** @internal */\n\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\n\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n/** @internal */\n\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    var _a, _b;\n\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = (_a = options.socketTimeoutMS) !== null && _a !== void 0 ? _a : 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n    this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = (0, utils_1.now)(); // setup parser stream and message handling\n\n    this[kQueue] = new Map();\n    this[kMessageStream] = new message_stream_1.MessageStream({ ...options,\n      maxBsonMessageSize: (_b = this.hello) === null || _b === void 0 ? void 0 : _b.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n    this[kDelayedTimeoutId] = null;\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    }); // hook the message stream up to the passed in stream\n\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n\n  get description() {\n    return this[kDescription];\n  }\n\n  get hello() {\n    return this[kHello];\n  } // the `connect` method stores the result of the handshake hello on the connection\n\n\n  set hello(response) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]); // TODO: remove this, and only use the `StreamDescription` in the future\n\n    this[kHello] = response;\n  } // Set the whether the message stream is for a monitoring connection.\n\n\n  set isMonitoringConnection(value) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n\n  get isMonitoringConnection() {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n\n  get serviceId() {\n    var _a;\n\n    return (_a = this.hello) === null || _a === void 0 ? void 0 : _a.serviceId;\n  }\n\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n  }\n\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n\n  get stream() {\n    return this[kStream];\n  }\n\n  markAvailable() {\n    this[kLastUseTime] = (0, utils_1.now)();\n  }\n\n  onError(error) {\n    if (this.closed) {\n      return;\n    }\n\n    this.destroy({\n      force: false\n    });\n\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n\n    this.destroy({\n      force: false\n    });\n    const message = `connection ${this.id} to ${this.address} closed`;\n\n    for (const op of this[kQueue].values()) {\n      op.cb(new error_1.MongoNetworkError(message));\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n\n    this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n      this.destroy({\n        force: false\n      });\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n\n      for (const op of this[kQueue].values()) {\n        op.cb(new error_1.MongoNetworkTimeoutError(message, {\n          beforeHandshake\n        }));\n      }\n\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n\n    if (delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    } // always emit the message, in case we are streaming\n\n\n    this.emit('message', message);\n    let operationDescription = this[kQueue].get(message.responseTo);\n\n    if (!operationDescription && this.isMonitoringConnection) {\n      // This is how we recover when the initial hello's requestId is not\n      // the responseTo when hello responses have been skipped:\n      // First check if the map is of invalid size\n      if (this[kQueue].size > 1) {\n        this.onError(new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n      } else {\n        // Get the first orphaned operation description.\n        const entry = this[kQueue].entries().next();\n\n        if (entry.value != null) {\n          const [requestId, orphaned] = entry.value; // If the orphaned operation description exists then set it.\n\n          operationDescription = orphaned; // Remove the entry with the bad request id from the queue.\n\n          this[kQueue].delete(requestId);\n        }\n      }\n    }\n\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb; // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n\n    this[kQueue].delete(message.responseTo);\n\n    if ('moreToCome' in message && message.moreToCome) {\n      // If the operation description check above does find an orphaned\n      // description and sets the operationDescription then this line will put one\n      // back in the queue with the correct requestId and will resolve not being able\n      // to find the next one via the responseTo of the next streaming hello.\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n\n      if (session) {\n        (0, sessions_1.updateSessionFromResponse)(session, document);\n      }\n\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new error_1.MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      }\n    }\n\n    callback(undefined, message.documents[0]);\n  }\n\n  destroy(options, callback) {\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    this[kMessageStream].destroy();\n    this.closed = true;\n\n    if (options.force) {\n      this[kStream].destroy();\n\n      if (callback) {\n        return process.nextTick(callback);\n      }\n    }\n\n    if (!this[kStream].writableEnded) {\n      this[kStream].end(callback);\n    } else {\n      if (callback) {\n        return process.nextTick(callback);\n      }\n    }\n  }\n\n  command(ns, cmd, options, callback) {\n    const readPreference = (0, shared_1.getReadPreference)(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = (0, sessions_1.applySession)(session, finalCmd, options);\n\n      if (err) {\n        return callback(err);\n      }\n    } // if we have a known cluster time, gossip it\n\n\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n\n    if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions = Object.assign({\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk()\n    }, options);\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg ? new commands_1.Msg(cmdNs, finalCmd, commandOptions) : new commands_1.Query(cmdNs, finalCmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n}\n\nexports.Connection = Connection;\n/** @event */\n\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\n\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\n\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\n\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\n\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\n\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\n\nConnection.PINNED = constants_1.PINNED;\n/** @event */\n\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\n\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n  /** @internal @override */\n\n\n  command(ns, cmd, options, callback) {\n    const autoEncrypter = this[kAutoEncrypter];\n\n    if (!autoEncrypter) {\n      return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n      return;\n    } // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n\n\n    const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys = cmd.createIndexes ? cmd.indexes.map(index => index.key) : null;\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      } // Replace the saved values\n\n\n      if (sort != null && (cmd.find || cmd.findAndModify)) {\n        encrypted.sort = sort;\n      }\n\n      if (indexKeys != null && cmd.createIndexes) {\n        for (const [offset, index] of indexKeys.entries()) {\n          encrypted.indexes[offset].key = index;\n        }\n      }\n\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n\n}\n\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\n\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\n\nexports.hasSessionSupport = hasSessionSupport;\n\nfunction supportsOpMsg(conn) {\n  const description = conn.description;\n\n  if (description == null) {\n    return false;\n  }\n\n  return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  const {\n    remoteAddress,\n    remotePort\n  } = stream;\n\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n\n  return (0, utils_1.uuidV4)().toString('hex');\n}\n\nfunction write(conn, command, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  } // if command monitoring is enabled we need to modify the callback here\n\n\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n    operationDescription.started = (0, utils_1.now)();\n\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n        } else {\n          conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}","map":{"version":3,"mappings":"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","names":["kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kHello","kAutoEncrypter","kDelayedTimeoutId","INVALID_QUEUE_SIZE","Connection","mongo_types_1","constructor","stream","options","id","address","streamIdentifier","socketTimeoutMS","_a","monitorCommands","serverApi","closed","stream_description_1","generation","Map","message_stream_1","maxBsonMessageSize","hello","_b","on","message","onMessage","error","onError","onClose","onTimeout","pipe","description","response","receiveResponse","Object","freeze","isMonitoringConnection","value","serviceId","loadBalanced","idleTime","clusterTime","markAvailable","destroy","force","op","values","cb","clear","emit","CLOSE","error_1","beforeHandshake","unref","delayedTimeoutId","operationDescription","get","responseTo","size","entry","entries","next","requestId","orphaned","delete","callback","moreToCome","set","socketTimeoutOverride","setTimeout","parse","err","documents","document","session","$clusterTime","CLUSTER_TIME_RECEIVED","command","writeConcernError","ok","$err","errmsg","code","undefined","removeAllListeners","PINNED","UNPINNED","process","nextTick","writableEnded","end","ns","cmd","readPreference","shouldUseOpMsg","supportsOpMsg","finalCmd","assign","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","hasSessionSupport","greaterThan","mode","$query","$readPreference","toJSON","commandOptions","numberToSkip","numberToReturn","checkKeys","secondaryOk","cmdNs","db","commands_1","write","exports","constants_1","CryptoConnection","autoEncrypter","serverWireVersion","sort","find","findAndModify","indexKeys","createIndexes","indexes","map","index","key","encrypt","toString","encrypted","offset","decrypt","conn","logicalSessionTimeoutMinutes","__nodejs_mock_server__","proxyHost","hostAddress","remoteAddress","remotePort","utils_1","fromHostPort","noResponse","documentsReturnedIn","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","enableUtf8Validation","raw","started","compressor","agreedCompressor","zlibCompressionLevel","COMMAND_STARTED","command_monitoring_events_1","reply","COMMAND_FAILED","COMMAND_SUCCEEDED","writeCommand","e"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\cmap\\connection.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { BSONSerializeOptions, Document, ObjectId } from '../bson';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  MESSAGE,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  MongoCompatibilityError,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreferenceLike } from '../read_preference';\nimport { applySession, ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  ClientMetadata,\n  HostAddress,\n  maxWireVersion,\n  MongoDBNamespace,\n  now,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport { BinMsg, Msg, Query, Response, WriteProtocolMessageType } from './commands';\nimport type { Stream } from './connect';\nimport { MessageStream, OperationDescription } from './message_stream';\nimport { StreamDescription, StreamDescriptionOptions } from './stream_description';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\n\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  command?: boolean;\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n}\n\n/** @internal */\nexport interface GetMoreOptions extends CommandOptions {\n  batchSize?: number;\n  maxTimeMS?: number;\n  maxAwaitTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  // Settings\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: typeof Connection;\n  credentials?: MongoCredentials;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  keepAlive?: boolean;\n  keepAliveInitialDelay?: number;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n\n  metadata: ClientMetadata;\n}\n\n/** @public */\nexport interface DestroyOptions {\n  /** Force the destruction. */\n  force: boolean;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  message(message: any): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  id: number | '<monitor>';\n  address: string;\n  socketTimeoutMS: number;\n  monitorCommands: boolean;\n  /** Indicates that the connection (including underlying TCP socket) has been closed. */\n  closed: boolean;\n  lastHelloMS?: number;\n  serverApi?: ServerApi;\n  helloOk?: boolean;\n\n  /**@internal */\n  [kDelayedTimeoutId]: NodeJS.Timeout | null;\n  /** @internal */\n  [kDescription]: StreamDescription;\n  /** @internal */\n  [kGeneration]: number;\n  /** @internal */\n  [kLastUseTime]: number;\n  /** @internal */\n  [kQueue]: Map<number, OperationDescription>;\n  /** @internal */\n  [kMessageStream]: MessageStream;\n  /** @internal */\n  [kStream]: Stream;\n  /** @internal */\n  [kHello]: Document | null;\n  /** @internal */\n  [kClusterTime]: Document | null;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly MESSAGE = MESSAGE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now();\n\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream({\n      ...options,\n      maxBsonMessageSize: this.hello?.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n\n    this[kDelayedTimeoutId] = null;\n\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n\n  get description(): StreamDescription {\n    return this[kDescription];\n  }\n\n  get hello(): Document | null {\n    return this[kHello];\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response: Document | null) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value: boolean) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n\n  get isMonitoringConnection(): boolean {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n\n  get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  get generation(): number {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation: number) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime(): number {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime(): Document | null {\n    return this[kClusterTime];\n  }\n\n  get stream(): Stream {\n    return this[kStream];\n  }\n\n  markAvailable(): void {\n    this[kLastUseTime] = now();\n  }\n\n  onError(error: Error) {\n    if (this.closed) {\n      return;\n    }\n    this.destroy({ force: false });\n\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n    this.destroy({ force: false });\n\n    const message = `connection ${this.id} to ${this.address} closed`;\n    for (const op of this[kQueue].values()) {\n      op.cb(new MongoNetworkError(message));\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n\n    this[kDelayedTimeoutId] = setTimeout(() => {\n      this.destroy({ force: false });\n\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      for (const op of this[kQueue].values()) {\n        op.cb(new MongoNetworkTimeoutError(message, { beforeHandshake }));\n      }\n\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message: BinMsg | Response) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      clearTimeout(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    let operationDescription = this[kQueue].get(message.responseTo);\n\n    if (!operationDescription && this.isMonitoringConnection) {\n      // This is how we recover when the initial hello's requestId is not\n      // the responseTo when hello responses have been skipped:\n\n      // First check if the map is of invalid size\n      if (this[kQueue].size > 1) {\n        this.onError(new MongoRuntimeError(INVALID_QUEUE_SIZE));\n      } else {\n        // Get the first orphaned operation description.\n        const entry = this[kQueue].entries().next();\n        if (entry.value != null) {\n          const [requestId, orphaned]: [number, OperationDescription] = entry.value;\n          // If the orphaned operation description exists then set it.\n          operationDescription = orphaned;\n          // Remove the entry with the bad request id from the queue.\n          this[kQueue].delete(requestId);\n        }\n      }\n    }\n\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb;\n\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // If the operation description check above does find an orphaned\n      // description and sets the operationDescription then this line will put one\n      // back in the queue with the correct requestId and will resolve not being able\n      // to find the next one via the responseTo of the next streaming hello.\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document: Document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      }\n    }\n\n    callback(undefined, message.documents[0]);\n  }\n\n  destroy(options: DestroyOptions, callback?: Callback): void {\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n\n    this[kMessageStream].destroy();\n    this.closed = true;\n\n    if (options.force) {\n      this[kStream].destroy();\n      if (callback) {\n        return process.nextTick(callback);\n      }\n    }\n\n    if (!this[kStream].writableEnded) {\n      this[kStream].end(callback);\n    } else {\n      if (callback) {\n        return process.nextTick(callback);\n      }\n    }\n  }\n\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions | undefined,\n    callback: Callback\n  ): void {\n    const readPreference = getReadPreference(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = applySession(session, finalCmd, options);\n      if (err) {\n        return callback(err);\n      }\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n\n    if (isSharded(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions: Document = Object.assign(\n      {\n        command: true,\n        numberToSkip: 0,\n        numberToReturn: -1,\n        checkKeys: false,\n        // This value is not overridable\n        secondaryOk: readPreference.secondaryOk()\n      },\n      options\n    );\n\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg\n      ? new Msg(cmdNs, finalCmd, commandOptions)\n      : new Query(cmdNs, finalCmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  [kAutoEncrypter]?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n\n  /** @internal @override */\n  override command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback\n  ): void {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(\n        new MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2')\n      );\n      return;\n    }\n\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort: Map<string, number> | null = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys: Map<string, number>[] | null = cmd.createIndexes\n      ? cmd.indexes.map((index: { key: Map<string, number> }) => index.key)\n      : null;\n\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n\n      // Replace the saved values\n      if (sort != null && (cmd.find || cmd.findAndModify)) {\n        encrypted.sort = sort;\n      }\n      if (indexKeys != null && cmd.createIndexes) {\n        for (const [offset, index] of indexKeys.entries()) {\n          encrypted.indexes[offset].key = index;\n        }\n      }\n\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\n\nfunction supportsOpMsg(conn: Connection) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n\n  return maxWireVersion(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  const { remoteAddress, remotePort } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n\n  return uuidV4().toString('hex');\n}\n\nfunction write(\n  conn: Connection,\n  command: WriteProtocolMessageType,\n  options: CommandOptions,\n  callback: Callback\n) {\n  options = options ?? {};\n  const operationDescription: OperationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation:\n      typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new CommandStartedEvent(conn, command));\n\n    operationDescription.started = now();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(\n          Connection.COMMAND_FAILED,\n          new CommandFailedEvent(conn, command, err, operationDescription.started)\n        );\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(\n            Connection.COMMAND_FAILED,\n            new CommandFailedEvent(conn, command, reply, operationDescription.started)\n          );\n        } else {\n          conn.emit(\n            Connection.COMMAND_SUCCEEDED,\n            new CommandSucceededEvent(conn, command, reply, operationDescription.started)\n          );\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}