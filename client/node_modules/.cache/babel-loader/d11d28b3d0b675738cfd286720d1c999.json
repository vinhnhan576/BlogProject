{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LoggerLevel = void 0;\n\nconst util_1 = require(\"util\");\n\nconst error_1 = require(\"./error\");\n\nconst utils_1 = require(\"./utils\"); // Filters for classes\n\n\nconst classFilters = {};\nlet filteredClasses = {};\nlet level; // Save the process id\n\nconst pid = process.pid; // current logger\n// eslint-disable-next-line no-console\n\nlet currentLogger = console.warn;\n/** @public */\n\nexports.LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n});\n/**\n * @public\n * @deprecated This logger is unused and will be removed in the next major version.\n */\n\nclass Logger {\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className, options) {\n    options = options !== null && options !== void 0 ? options : {}; // Current reference\n\n    this.className = className; // Current logger\n\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    } // Set level of logging, default is error\n\n\n    if (options.loggerLevel) {\n      level = options.loggerLevel || exports.LoggerLevel.ERROR;\n    } // Add all class names\n\n\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  debug(message, object) {\n    if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  warn(message, object) {\n    if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  info(message, object) {\n    if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  error(message, object) {\n    if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /** Is the logger set at info level */\n\n\n  isInfo() {\n    return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n\n\n  isError() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n\n\n  isWarn() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.WARN || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at debug level */\n\n\n  isDebug() {\n    return level === exports.LoggerLevel.DEBUG;\n  }\n  /** Resets the logger to default settings, error and no filtered classes */\n\n\n  static reset() {\n    level = exports.LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n  /** Get the current logger function */\n\n\n  static currentLogger() {\n    return currentLogger;\n  }\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n\n\n  static setCurrentLogger(logger) {\n    if (typeof logger !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n    }\n\n    currentLogger = logger;\n  }\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n\n\n  static filter(type, values) {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => filteredClasses[x] = true);\n    }\n  }\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n\n\n  static setLevel(newLevel) {\n    if (newLevel !== exports.LoggerLevel.INFO && newLevel !== exports.LoggerLevel.ERROR && newLevel !== exports.LoggerLevel.DEBUG && newLevel !== exports.LoggerLevel.WARN) {\n      throw new error_1.MongoInvalidArgumentError(`Argument \"newLevel\" should be one of ${(0, utils_1.enumToString)(exports.LoggerLevel)}`);\n    }\n\n    level = newLevel;\n  }\n\n}\n\nexports.Logger = Logger;","map":{"version":3,"mappings":"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","names":["classFilters","filteredClasses","level","pid","process","currentLogger","console","warn","exports","Object","freeze","ERROR","WARN","INFO","DEBUG","error","info","debug","Logger","constructor","className","options","logger","loggerLevel","message","object","isDebug","keys","length","dateTime","Date","getTime","msg","state","type","date","meta","isWarn","isInfo","isError","reset","setCurrentLogger","error_1","filter","values","Array","isArray","forEach","x","setLevel","newLevel"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\logger.ts"],"sourcesContent":["import { format } from 'util';\n\nimport { MongoInvalidArgumentError } from './error';\nimport { enumToString } from './utils';\n\n// Filters for classes\nconst classFilters: any = {};\nlet filteredClasses: any = {};\nlet level: LoggerLevel;\n\n// Save the process id\nconst pid = process.pid;\n\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger: LoggerFunction = console.warn;\n\n/** @public */\nexport const LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n} as const);\n\n/** @public */\nexport type LoggerLevel = typeof LoggerLevel[keyof typeof LoggerLevel];\n\n/** @public */\nexport type LoggerFunction = (message?: any, ...optionalParams: any[]) => void;\n\n/** @public */\nexport interface LoggerOptions {\n  logger?: LoggerFunction;\n  loggerLevel?: LoggerLevel;\n}\n\n/**\n * @public\n * @deprecated This logger is unused and will be removed in the next major version.\n */\nexport class Logger {\n  className: string;\n\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className: string, options?: LoggerOptions) {\n    options = options ?? {};\n\n    // Current reference\n    this.className = className;\n\n    // Current logger\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    }\n\n    // Set level of logging, default is error\n    if (options.loggerLevel) {\n      level = options.loggerLevel || LoggerLevel.ERROR;\n    }\n\n    // Add all class names\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  debug(message: string, object?: unknown): void {\n    if (\n      this.isDebug() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  warn(message: string, object?: unknown): void {\n    if (\n      this.isWarn() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  info(message: string, object?: unknown): void {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  error(message: string, object?: unknown): void {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /** Is the logger set at info level */\n  isInfo(): boolean {\n    return level === LoggerLevel.INFO || level === LoggerLevel.DEBUG;\n  }\n\n  /** Is the logger set at error level */\n  isError(): boolean {\n    return level === LoggerLevel.ERROR || level === LoggerLevel.INFO || level === LoggerLevel.DEBUG;\n  }\n\n  /** Is the logger set at error level */\n  isWarn(): boolean {\n    return (\n      level === LoggerLevel.ERROR ||\n      level === LoggerLevel.WARN ||\n      level === LoggerLevel.INFO ||\n      level === LoggerLevel.DEBUG\n    );\n  }\n\n  /** Is the logger set at debug level */\n  isDebug(): boolean {\n    return level === LoggerLevel.DEBUG;\n  }\n\n  /** Resets the logger to default settings, error and no filtered classes */\n  static reset(): void {\n    level = LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n\n  /** Get the current logger function */\n  static currentLogger(): LoggerFunction {\n    return currentLogger;\n  }\n\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n  static setCurrentLogger(logger: LoggerFunction): void {\n    if (typeof logger !== 'function') {\n      throw new MongoInvalidArgumentError('Current logger must be a function');\n    }\n\n    currentLogger = logger;\n  }\n\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n  static filter(type: string, values: string[]): void {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => (filteredClasses[x] = true));\n    }\n  }\n\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n  static setLevel(newLevel: LoggerLevel): void {\n    if (\n      newLevel !== LoggerLevel.INFO &&\n      newLevel !== LoggerLevel.ERROR &&\n      newLevel !== LoggerLevel.DEBUG &&\n      newLevel !== LoggerLevel.WARN\n    ) {\n      throw new MongoInvalidArgumentError(\n        `Argument \"newLevel\" should be one of ${enumToString(LoggerLevel)}`\n      );\n    }\n\n    level = newLevel;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}