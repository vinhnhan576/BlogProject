{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromiseProvider = void 0;\n\nconst error_1 = require(\"./error\");\n/** @internal */\n\n\nconst kPromise = Symbol('promise');\nconst store = {\n  [kPromise]: null\n};\n/**\n * Global promise store allowing user-provided promises\n * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n * @public\n */\n\nclass PromiseProvider {\n  /**\n   * Validates the passed in promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static validate(lib) {\n    if (typeof lib !== 'function') throw new error_1.MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n  /**\n   * Sets the promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n\n\n  static set(lib) {\n    // eslint-disable-next-line no-restricted-syntax\n    if (lib === null) {\n      // Check explicitly against null since `.set()` (no args) should fall through to validate\n      store[kPromise] = null;\n      return;\n    }\n\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n\n    store[kPromise] = lib;\n  }\n  /**\n   * Get the stored promise library, or resolves passed in\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n\n\n  static get() {\n    return store[kPromise];\n  }\n\n}\n\nexports.PromiseProvider = PromiseProvider;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;AACA,MAAMA,QAAQ,GAAGC,MAAM,CAAC,SAAD,CAAvB;AAMA,MAAMC,KAAK,GAAiB;EAC1B,CAACF,QAAD,GAAY;AADc,CAA5B;AAIA;;;;;;AAKA,MAAaG,eAAb,CAA4B;EAC1B;;;;EAIe,OAARC,QAAQ,CAACC,GAAD,EAAa;IAC1B,IAAI,OAAOA,GAAP,KAAe,UAAnB,EACE,MAAM,IAAIC,iCAAJ,CAA8B,mCAAmCD,GAAG,EAApE,CAAN;IACF,OAAO,CAAC,CAACA,GAAT;EACD;EAED;;;;;;EAIU,OAAHE,GAAG,CAACF,GAAD,EAA+B;IACvC;IACA,IAAIA,GAAG,KAAK,IAAZ,EAAkB;MAChB;MACAH,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;MACA;IACD;;IAED,IAAI,CAACG,eAAe,CAACC,QAAhB,CAAyBC,GAAzB,CAAL,EAAoC;MAClC;MACA;IACD;;IACDH,KAAK,CAACF,QAAD,CAAL,GAAkBK,GAAlB;EACD;EAED;;;;;;EAIU,OAAHG,GAAG;IACR,OAAON,KAAK,CAACF,QAAD,CAAZ;EACD;;AApCyB;;AAA5BS","names":["kPromise","Symbol","store","PromiseProvider","validate","lib","error_1","set","get","exports"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\promise_provider.ts"],"sourcesContent":["import { MongoInvalidArgumentError } from './error';\n\n/** @internal */\nconst kPromise = Symbol('promise');\n\ninterface PromiseStore {\n  [kPromise]: PromiseConstructor | null;\n}\n\nconst store: PromiseStore = {\n  [kPromise]: null\n};\n\n/**\n * Global promise store allowing user-provided promises\n * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n * @public\n */\nexport class PromiseProvider {\n  /**\n   * Validates the passed in promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static validate(lib: unknown): lib is PromiseConstructor {\n    if (typeof lib !== 'function')\n      throw new MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n\n  /**\n   * Sets the promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static set(lib: PromiseConstructor | null): void {\n    // eslint-disable-next-line no-restricted-syntax\n    if (lib === null) {\n      // Check explicitly against null since `.set()` (no args) should fall through to validate\n      store[kPromise] = null;\n      return;\n    }\n\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n\n  /**\n   * Get the stored promise library, or resolves passed in\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static get(): PromiseConstructor | null {\n    return store[kPromise];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}