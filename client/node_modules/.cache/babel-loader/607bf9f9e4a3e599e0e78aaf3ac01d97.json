{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\n\nconst dns = require(\"dns\");\n\nconst fs = require(\"fs\");\n\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nconst url_1 = require(\"url\");\n\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nconst providers_1 = require(\"./cmap/auth/providers\");\n\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nconst encrypter_1 = require(\"./encrypter\");\n\nconst error_1 = require(\"./error\");\n\nconst logger_1 = require(\"./logger\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_logger_1 = require(\"./mongo_logger\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nasync function resolveSRVRecord(options) {\n  var _a, _b, _c;\n\n  if (typeof options.srvHost !== 'string') {\n    throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n\n  if (addresses.length === 0) {\n    throw new error_1.MongoAPIError('No addresses found at host');\n  }\n\n  for (const {\n    name\n  } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n\n  const hostAddresses = addresses.map(r => {\n    var _a;\n\n    return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n  });\n  validateLoadBalancedOptions(hostAddresses, options, true); // Resolve TXT record and add options from there if they exist.\n\n  let record;\n\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new error_1.MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n  const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n  const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n\n  if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n      source\n    });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  return hostAddresses;\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\n\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n\n    return true;\n  }\n\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n\n    return false;\n  }\n\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n\n  return parsedValue;\n}\n\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n\n}\n\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null); // Feature flags\n\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  })); // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  } // All option collection\n\n\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValue = urlOptions.get(key);\n\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  } // Option parsing and setting\n\n\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n\n    mongoOptions.credentials.validate(); // Check if the only auth related option provided was authSource, if so we can remove credentials\n\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  if (options.promiseLibrary) {\n    promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  } // Potential SRV Overrides and SRV connection string validations\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    } // SRV turns on TLS by default, but users can override and turn it off\n\n\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => {\n    var _a;\n\n    return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : [];\n  });\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = (_a = mongoOptions[loggerFeatureFlag]) !== null && _a !== void 0 ? _a : false;\n  let loggerEnvOptions = {};\n  let loggerClientOptions = {};\n\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n\n  return;\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n\n    transform(_ref3) {\n      let {\n        options,\n        values: [value]\n      } = _ref3;\n      return (0, utils_1.makeClientMetadata)({ ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n\n  },\n  auth: {\n    target: 'credentials',\n\n    transform(_ref4) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref4;\n\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n\n  },\n  authMechanism: {\n    target: 'credentials',\n\n    transform(_ref5) {\n      let {\n        options,\n        values: [value]\n      } = _ref5;\n\n      var _a, _b;\n\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n\n    transform(_ref6) {\n      let {\n        options,\n        values: [optionValue]\n      } = _ref6;\n\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n\n  },\n  authSource: {\n    target: 'credentials',\n\n    transform(_ref7) {\n      let {\n        options,\n        values: [value]\n      } = _ref7;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n\n    transform(_ref8) {\n      let {\n        values: [version]\n      } = _ref8;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      return serverApiToValidate;\n    }\n\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n\n    transform(_ref9) {\n      let {\n        values\n      } = _ref9;\n      const compressionList = new Set();\n\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n\n      return [...compressionList];\n    }\n\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n\n    transform(_ref10) {\n      let {\n        options,\n        values: [value]\n      } = _ref10;\n\n      var _a, _b;\n\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref11) {\n      let {\n        name,\n        values: [value]\n      } = _ref11;\n      const transformValue = getIntFromOptions(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform(_ref13) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref13;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  journal: {\n    target: 'writeConcern',\n\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n\n    transform(_ref15) {\n      let {\n        values: [value]\n      } = _ref15;\n\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported'); // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n\n      return;\n    }\n\n  },\n  loggerLevel: {\n    target: 'logger',\n\n    transform(_ref16) {\n      let {\n        values: [value]\n      } = _ref16;\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n\n  },\n  maxConnecting: {\n    default: 2,\n\n    transform(_ref17) {\n      let {\n        name,\n        values: [value]\n      } = _ref17;\n      const maxConnecting = getUIntFromOptions(name, value);\n\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n\n      return maxConnecting;\n    }\n\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n\n    transform(_ref18) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref18;\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      return { ...options.driverInfo,\n        name: String(value)\n      };\n    }\n\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n\n    transform(_ref20) {\n      let {\n        values: [value]\n      } = _ref20;\n\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref21) {\n      let {\n        values: [value],\n        options\n      } = _ref21;\n\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n          ...value\n        });\n      }\n\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n\n    transform(_ref22) {\n      let {\n        values: [level],\n        options\n      } = _ref22;\n      return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n        level: level\n      });\n    }\n\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n\n    transform(_ref23) {\n      let {\n        values: [value],\n        options\n      } = _ref23;\n\n      var _a, _b, _c;\n\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n\n    transform(_ref24) {\n      let {\n        values,\n        options\n      } = _ref24;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        readPreferenceTags.push(readPreferenceTag);\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n\n    transform(_ref25) {\n      let {\n        values: [value]\n      } = _ref25;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCRL: {\n    target: 'crl',\n\n    transform(_ref26) {\n      let {\n        values: [value]\n      } = _ref26;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCert: {\n    target: 'cert',\n\n    transform(_ref27) {\n      let {\n        values: [value]\n      } = _ref27;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslKey: {\n    target: 'key',\n\n    transform(_ref28) {\n      let {\n        values: [value]\n      } = _ref28;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n\n    transform(_ref29) {\n      let {\n        name,\n        values: [value]\n      } = _ref29;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n\n    transform(_ref30) {\n      let {\n        name,\n        values: [value]\n      } = _ref30;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n\n  },\n  tlsCAFile: {\n    target: 'ca',\n\n    transform(_ref31) {\n      let {\n        values: [value]\n      } = _ref31;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n\n    transform(_ref32) {\n      let {\n        values: [value]\n      } = _ref32;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n\n    transform(_ref33) {\n      let {\n        values: [value]\n      } = _ref33;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref34) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref34;\n      const tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n\n  },\n  w: {\n    target: 'writeConcern',\n\n    transform(_ref35) {\n      let {\n        values: [value],\n        options\n      } = _ref35;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n\n    transform(_ref36) {\n      let {\n        values: [value],\n        options\n      } = _ref36;\n\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n\n    transform(_ref37) {\n      let {\n        values: [value],\n        options\n      } = _ref37;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n\n    transform(_ref38) {\n      let {\n        values: [value],\n        options\n      } = _ref38;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref39 => {\n  let [, descriptor] = _ref39;\n  return descriptor.default != null;\n}).map(_ref40 => {\n  let [k, d] = _ref40;\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\n\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger')]);","map":{"version":3,"mappings":"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","names":["VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","srvHost","error_1","split","length","lookupAddress","addresses","dns","promises","resolveSrv","srvServiceName","name","hostAddresses","map","r","fromString","port","_a","validateLoadBalancedOptions","record","resolveTxt","error","code","txtRecordOptions","url_1","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","_b","loadBalanced","_c","userSpecifiedAuthSource","credentials","providers_1","has","mechanism","mongo_credentials_1","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","allOptions","check","a","b","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","getIntFromOptions","parsedInt","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","mongo_client_1","url","mongodb_connection_string_url_1","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","utils_1","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","allKeys","objectOptionValue","push","urlValue","defaultOptionsValue","tlsAndSslOpts","concat","bind","size","unsupportedOptions","Array","from","s","optionWord","isOrAre","descriptor","setOption","isGssapi","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","MONGODB_DEFAULT","mechanismProperties","promiseLibrary","promise_provider_1","autoEncryption","encrypter_1","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongoLoggerOptions","mongo_logger_1","resolveOptions","isSrv","target","type","transform","deprecated","deprecatedMsg","transformValue","appName","driverInfo","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","checkKeys","compressors","default","compressionList","compVal","compValArray","isArray","c","compression_1","add","connectTimeoutMS","metadata","application","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","write_concern_1","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","logger_1","loggerLevel","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","read_preference_1","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","read_concern_1","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","fs","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoParseError\n} from './error';\nimport { Logger as LegacyLogger, LoggerLevel as LegacyLoggerLevel } from './logger';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { MongoLogger, MongoLoggerEnvOptions, MongoLoggerMongoClientOptions } from './mongo_logger';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  emitWarningOnce,\n  HostAddress,\n  isRecord,\n  makeClientMetadata,\n  parseInteger,\n  setDifference\n} from './utils';\nimport { W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\n  if (typeof options.srvHost !== 'string') {\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(\n    `_${options.srvServiceName}._tcp.${lookupAddress}`\n  );\n\n  if (addresses.length === 0) {\n    throw new MongoAPIError('No addresses found at host');\n  }\n\n  for (const { name } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n  if (\n    !options.userSpecifiedAuthSource &&\n    source &&\n    options.credentials &&\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n  ) {\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  return hostAddresses;\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\n  if (!allOptions) return;\n  const check = (a: string, b: string) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\n      );\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\n      );\n    }\n    return false;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getIntFromOptions(name: string, value: unknown): number {\n  const parsedInt = parseInteger(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name: string, value: unknown): number {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<any[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || [])\n      .concat(allOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allOptions);\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new MongoMissingCredentialsError(\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\n      );\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  if (options.promiseLibrary) {\n    PromiseProvider.set(options.promiseLibrary);\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n\n  let loggerEnvOptions: MongoLoggerEnvOptions = {};\n  let loggerClientOptions: MongoLoggerMongoClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\n    loggerEnvOptions,\n    loggerClientOptions\n  );\n\n  return mongoOptions;\n}\n\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): void {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [optionValue] }): MongoCredentials {\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!isRecord(optionValue)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: optionValue });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new LegacyLogger('MongoClient'),\n    transform({ values: [value] }) {\n      if (value instanceof LegacyLogger) {\n        return value;\n      }\n      emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({ values: [value] }) {\n      return new LegacyLogger('MongoClient', { loggerLevel: value as LegacyLoggerLevel });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([\n  Symbol.for('@@mdb.skipPingOnConnect'),\n  Symbol.for('@@mdb.enableMongoLogger')\n]);\n"]},"metadata":{},"sourceType":"script"}