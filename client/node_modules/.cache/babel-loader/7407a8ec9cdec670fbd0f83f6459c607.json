{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nconst bson_1 = require(\"./bson\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst utils_1 = require(\"./utils\");\n\nlet AutoEncrypterClass;\n/** @internal */\n\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\n\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    } // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n\n\n    this[kInternalClient] = null;\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    options.autoEncryption.bson = Object.create(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.serialize = bson_1.serialize; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client, uri, options) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n\n    if (internalClient == null) {\n      const clonedOptions = {};\n\n      for (const key of [...Object.getOwnPropertyNames(options), ...Object.getOwnPropertySymbols(options)]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n      internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient === null || internalClient === void 0 ? void 0 : internalClient.on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return internalClient;\n  }\n\n  async connectInternalClient() {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      await internalClient.connect();\n    }\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n\n      if (internalClient != null && client !== internalClient) {\n        return internalClient.close(force, callback);\n      }\n\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt() {\n    const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n\n    if (mongodbClientEncryption == null) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n\n}\n\nexports.Encrypter = Encrypter;","map":{"version":3,"mappings":"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","names":["AutoEncrypterClass","kInternalClient","Symbol","Encrypter","constructor","client","uri","options","autoEncryption","error_1","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","proxyHost","proxyOptions","proxyPort","proxyUsername","proxyPassword","bson","Object","create","serialize","bson_1","deserialize","autoEncrypter","internalClient","clonedOptions","key","getOwnPropertyNames","getOwnPropertySymbols","includes","Reflect","set","get","minPoolSize","mongo_client_1","eventName","constants_1","listener","listeners","on","connectInternalClient","connect","close","force","callback","teardown","e","checkForMongoCrypt","mongodbClientEncryption","extension","require","AutoEncrypter","exports"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\encrypter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { deserialize, serialize } from './bson';\nimport { MONGO_CLIENT_EVENTS } from './constants';\nimport type { AutoEncrypter, AutoEncryptionOptions } from './deps';\nimport { MongoInvalidArgumentError, MongoMissingDependencyError } from './error';\nimport { MongoClient, MongoClientOptions } from './mongo_client';\nimport { Callback, getMongoDBClientEncryption } from './utils';\n\nlet AutoEncrypterClass: { new (...args: ConstructorParameters<AutoEncrypter>): AutoEncrypter };\n\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n\n/** @internal */\nexport interface EncrypterOptions {\n  autoEncryption: AutoEncryptionOptions;\n  maxPoolSize?: number;\n}\n\n/** @internal */\nexport class Encrypter {\n  [kInternalClient]: MongoClient | null;\n  bypassAutoEncryption: boolean;\n  needsConnecting: boolean;\n  autoEncrypter: AutoEncrypter;\n\n  constructor(client: MongoClient, uri: string, options: MongoClientOptions) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    options.autoEncryption.bson = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson!.serialize = serialize;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson!.deserialize = deserialize;\n\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client: MongoClient, uri: string, options: MongoClientOptions): MongoClient {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n    if (internalClient == null) {\n      const clonedOptions: MongoClientOptions = {};\n\n      for (const key of [\n        ...Object.getOwnPropertyNames(options),\n        ...Object.getOwnPropertySymbols(options)\n      ] as string[]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n          continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n\n      internalClient = new MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient?.on(eventName, listener);\n      });\n\n      this.needsConnecting = true;\n    }\n    return internalClient;\n  }\n\n  async connectInternalClient(): Promise<void> {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      await internalClient.connect();\n    }\n  }\n\n  close(client: MongoClient, force: boolean, callback: Callback): void {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n      if (internalClient != null && client !== internalClient) {\n        return internalClient.close(force, callback);\n      }\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt(): void {\n    const mongodbClientEncryption = getMongoDBClientEncryption();\n    if (mongodbClientEncryption == null) {\n      throw new MongoMissingDependencyError(\n        'Auto-encryption requested, but the module is not installed. ' +\n          'Please add `mongodb-client-encryption` as a dependency of your project'\n      );\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}