{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\n\nexports.ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\n\nclass ReadConcern {\n  /** Constructs a ReadConcern from the read concern level.*/\n  constructor(level) {\n    var _a;\n    /**\n     * A spec test exists that allows level to be any string.\n     * \"invalid readConcern with out stage\"\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n     */\n\n\n    this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n  }\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param options - The options object from which to extract the write concern.\n   */\n\n\n  static fromOptions(options) {\n    if (options == null) {\n      return;\n    }\n\n    if (options.readConcern) {\n      const {\n        readConcern\n      } = options;\n\n      if (readConcern instanceof ReadConcern) {\n        return readConcern;\n      } else if (typeof readConcern === 'string') {\n        return new ReadConcern(readConcern);\n      } else if ('level' in readConcern && readConcern.level) {\n        return new ReadConcern(readConcern.level);\n      }\n    }\n\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n\n    return;\n  }\n\n  static get MAJORITY() {\n    return exports.ReadConcernLevel.majority;\n  }\n\n  static get AVAILABLE() {\n    return exports.ReadConcernLevel.available;\n  }\n\n  static get LINEARIZABLE() {\n    return exports.ReadConcernLevel.linearizable;\n  }\n\n  static get SNAPSHOT() {\n    return exports.ReadConcernLevel.snapshot;\n  }\n\n  toJSON() {\n    return {\n      level: this.level\n    };\n  }\n\n}\n\nexports.ReadConcern = ReadConcern;","map":{"version":3,"mappings":";;;;;;AAEA;;AACaA,2BAAmBC,MAAM,CAACC,MAAP,CAAc;EAC5CC,KAAK,EAAE,OADqC;EAE5CC,QAAQ,EAAE,UAFkC;EAG5CC,YAAY,EAAE,cAH8B;EAI5CC,SAAS,EAAE,WAJiC;EAK5CC,QAAQ,EAAE;AALkC,CAAd,CAAnB;AAcb;;;;;;;;AAOA,MAAaC,WAAb,CAAwB;EAGtB;EACAC,YAAYC,KAAZ,EAAmC;;IACjC;;;;;;;;IAMA,KAAKA,KAAL,GAAa,+BAAiBA,KAAjB,OAAuB,IAAvB,IAAuBC,aAAvB,GAAuBA,EAAvB,GAA2BD,KAAxC;EACD;EAED;;;;;;;EAKkB,OAAXE,WAAW,CAACC,OAAD,EAGjB;IACC,IAAIA,OAAO,IAAI,IAAf,EAAqB;MACnB;IACD;;IAED,IAAIA,OAAO,CAACC,WAAZ,EAAyB;MACvB,MAAM;QAAEA;MAAF,IAAkBD,OAAxB;;MACA,IAAIC,WAAW,YAAYN,WAA3B,EAAwC;QACtC,OAAOM,WAAP;MACD,CAFD,MAEO,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;QAC1C,OAAO,IAAIN,WAAJ,CAAgBM,WAAhB,CAAP;MACD,CAFM,MAEA,IAAI,WAAWA,WAAX,IAA0BA,WAAW,CAACJ,KAA1C,EAAiD;QACtD,OAAO,IAAIF,WAAJ,CAAgBM,WAAW,CAACJ,KAA5B,CAAP;MACD;IACF;;IAED,IAAIG,OAAO,CAACH,KAAZ,EAAmB;MACjB,OAAO,IAAIF,WAAJ,CAAgBK,OAAO,CAACH,KAAxB,CAAP;IACD;;IACD;EACD;;EAEkB,WAARK,QAAQ;IACjB,OAAOf,yBAAiBI,QAAxB;EACD;;EAEmB,WAATY,SAAS;IAClB,OAAOhB,yBAAiBM,SAAxB;EACD;;EAEsB,WAAZW,YAAY;IACrB,OAAOjB,yBAAiBK,YAAxB;EACD;;EAEkB,WAARa,QAAQ;IACjB,OAAOlB,yBAAiBO,QAAxB;EACD;;EAEDY,MAAM;IACJ,OAAO;MAAET,KAAK,EAAE,KAAKA;IAAd,CAAP;EACD;;AA9DqB;;AAAxBV","names":["exports","Object","freeze","local","majority","linearizable","available","snapshot","ReadConcern","constructor","level","_a","fromOptions","options","readConcern","MAJORITY","AVAILABLE","LINEARIZABLE","SNAPSHOT","toJSON"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\read_concern.ts"],"sourcesContent":["import type { Document } from './bson';\n\n/** @public */\nexport const ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n} as const);\n\n/** @public */\nexport type ReadConcernLevel = typeof ReadConcernLevel[keyof typeof ReadConcernLevel];\n\n/** @public */\nexport type ReadConcernLike = ReadConcern | { level: ReadConcernLevel } | ReadConcernLevel;\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\nexport class ReadConcern {\n  level: ReadConcernLevel | string;\n\n  /** Constructs a ReadConcern from the read concern level.*/\n  constructor(level: ReadConcernLevel) {\n    /**\n     * A spec test exists that allows level to be any string.\n     * \"invalid readConcern with out stage\"\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n     */\n    this.level = ReadConcernLevel[level] ?? level;\n  }\n\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param options - The options object from which to extract the write concern.\n   */\n  static fromOptions(options?: {\n    readConcern?: ReadConcernLike;\n    level?: ReadConcernLevel;\n  }): ReadConcern | undefined {\n    if (options == null) {\n      return;\n    }\n\n    if (options.readConcern) {\n      const { readConcern } = options;\n      if (readConcern instanceof ReadConcern) {\n        return readConcern;\n      } else if (typeof readConcern === 'string') {\n        return new ReadConcern(readConcern);\n      } else if ('level' in readConcern && readConcern.level) {\n        return new ReadConcern(readConcern.level);\n      }\n    }\n\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n    return;\n  }\n\n  static get MAJORITY(): 'majority' {\n    return ReadConcernLevel.majority;\n  }\n\n  static get AVAILABLE(): 'available' {\n    return ReadConcernLevel.available;\n  }\n\n  static get LINEARIZABLE(): 'linearizable' {\n    return ReadConcernLevel.linearizable;\n  }\n\n  static get SNAPSHOT(): 'snapshot' {\n    return ReadConcernLevel.snapshot;\n  }\n\n  toJSON(): Document {\n    return { level: this.level };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}