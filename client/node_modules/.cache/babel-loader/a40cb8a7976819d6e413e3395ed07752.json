{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMongoDBClientEncryption = exports.commandSupportsReadConcern = exports.shuffle = exports.parsePackageVersion = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeClientMetadata = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsyncSeries = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.databaseNamespace = exports.maybeCallback = exports.makeCounter = exports.MongoDBNamespace = exports.ns = exports.deprecateOptions = exports.defaultMsgHandler = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyWriteConcern = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.checkCollectionName = exports.MAX_JS_INT = void 0;\nexports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst os = require(\"os\");\n\nconst url_1 = require(\"url\");\n\nconst bson_1 = require(\"./bson\");\n\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\n\nconst constants_2 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst common_1 = require(\"./sdam/common\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nexports.MAX_JS_INT = Number.MAX_SAFE_INTEGER + 1;\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\n\nfunction checkCollectionName(collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw new error_1.MongoInvalidArgumentError('Collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n\n  if (collectionName.indexOf('$') !== -1 && collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  } // Validate that we are not passing 0x00 in the collection name\n\n\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\n\nexports.checkCollectionName = checkCollectionName;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\n\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\nexports.normalizeHintField = normalizeHintField;\n\nconst TO_STRING = object => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n\n\nfunction isObject(arg) {\n  return '[object Object]' === TO_STRING(arg);\n}\n\nexports.isObject = isObject;\n/** @internal */\n\nfunction mergeOptions(target, source) {\n  return { ...target,\n    ...source\n  };\n}\n\nexports.mergeOptions = mergeOptions;\n/** @internal */\n\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  } // Filtered options\n\n\n  return filterOptions;\n}\n\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\n\nfunction applyRetryableWrites(target, db) {\n  var _a;\n\n  if (db && ((_a = db.s.options) === null || _a === void 0 ? void 0 : _a.retryWrites)) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n\nfunction applyWriteConcern(target, sources, options) {\n  options = options !== null && options !== void 0 ? options : {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n  if (writeConcern) {\n    return Object.assign(target, {\n      writeConcern\n    });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, coll.writeConcern)\n    });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, db.writeConcern)\n    });\n  }\n\n  return target;\n}\n\nexports.applyWriteConcern = applyWriteConcern;\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\n\nfunction isPromiseLike(value) {\n  return !!value && typeof value.then === 'function';\n}\n\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\n\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\n\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n\n  const readConcern = Object.assign({}, command.readConcern || {});\n\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\n\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\n\nfunction decorateWithExplain(command, explain) {\n  if (command.explain) {\n    return command;\n  }\n\n  return {\n    explain: command,\n    verbosity: explain.verbosity\n  };\n}\n\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\n\nfunction getTopology(provider) {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('s' in provider && 'client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('s' in provider && 'db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\nexports.getTopology = getTopology;\n/**\n * Default message handler for generating deprecation warnings.\n * @internal\n *\n * @param name - function name\n * @param option - option name\n * @returns warning message\n */\n\nfunction defaultMsgHandler(name, option) {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\n\nexports.defaultMsgHandler = defaultMsgHandler;\n/**\n * Deprecates a given function's options.\n * @internal\n *\n * @param this - the bound class if this is a method\n * @param config - configuration for deprecation\n * @param fn - the target function of deprecation\n * @returns modified function that warns once per deprecated option, and executes original function\n */\n\nfunction deprecateOptions(config, fn) {\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n  const optionsWarned = new Set();\n\n  function deprecated() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const options = args[config.optionsIndex]; // ensure options is a valid, non-empty object, otherwise short-circuit\n\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.bind(this)(...args); // call the function, no change\n    } // interrupt the function call with a warning\n\n\n    for (const deprecatedOption of config.deprecatedOptions) {\n      if (deprecatedOption in options && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitWarning(msg);\n\n        if (this && 'getLogger' in this) {\n          const logger = this.getLogger();\n\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    }\n\n    return fn.bind(this)(...args);\n  } // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n\n\n  Object.setPrototypeOf(deprecated, fn);\n\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n\n  return deprecated;\n}\n\nexports.deprecateOptions = deprecateOptions;\n/** @internal */\n\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\n\nexports.ns = ns;\n/** @public */\n\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection === '' ? undefined : collection;\n  }\n\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection) {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace) {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n\n}\n\nexports.MongoDBNamespace = MongoDBNamespace;\n/** @internal */\n\nfunction* makeCounter() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let count = seed;\n\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\nexports.makeCounter = makeCounter;\n\nfunction maybeCallback(promiseFn, callback) {\n  const PromiseConstructor = promise_provider_1.PromiseProvider.get();\n  const promise = promiseFn();\n\n  if (callback == null) {\n    if (PromiseConstructor == null) {\n      return promise;\n    } else {\n      return new PromiseConstructor((resolve, reject) => {\n        promise.then(resolve, reject);\n      });\n    }\n  }\n\n  promise.then(result => callback(undefined, result), error => callback(error));\n  return;\n}\n\nexports.maybeCallback = maybeCallback;\n/** @internal */\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\n\nexports.databaseNamespace = databaseNamespace;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\n\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\n\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\n\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\n\nfunction eachAsync(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = 0;\n\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err) {\n    awaiting--;\n\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\nexports.eachAsync = eachAsync;\n/** @internal */\n\nfunction eachAsyncSeries(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = arr.length;\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err) {\n    idx++;\n    awaiting--;\n\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n\n    eachFn(arr[idx], eachCallback);\n  }\n\n  eachFn(arr[idx], eachCallback);\n}\n\nexports.eachAsyncSeries = eachAsyncSeries;\n/** @internal */\n\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\n\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\n\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\nexports.makeStateMachine = makeStateMachine; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nconst NODE_DRIVER_VERSION = require('../package.json').version;\n\nfunction makeClientMetadata(options) {\n  options = options !== null && options !== void 0 ? options : {};\n  const metadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  }; // support optionally provided wrapping driver info\n\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n\n  return metadata;\n}\n\nexports.makeClientMetadata = makeClientMetadata;\n/** @internal */\n\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\nexports.now = now;\n/** @internal */\n\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\n\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\n\nfunction resolveOptions(parent, options) {\n  var _a, _b, _c;\n\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent)); // Users cannot pass a readConcern/writeConcern to operations in a transaction\n\n  const session = options === null || options === void 0 ? void 0 : options.session;\n\n  if (!(session === null || session === void 0 ? void 0 : session.inTransaction())) {\n    const readConcern = (_a = read_concern_1.ReadConcern.fromOptions(options)) !== null && _a !== void 0 ? _a : parent === null || parent === void 0 ? void 0 : parent.readConcern;\n\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = (_b = write_concern_1.WriteConcern.fromOptions(options)) !== null && _b !== void 0 ? _b : parent === null || parent === void 0 ? void 0 : parent.writeConcern;\n\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = (_c = read_preference_1.ReadPreference.fromOptions(options)) !== null && _c !== void 0 ? _c : parent === null || parent === void 0 ? void 0 : parent.readPreference;\n\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexports.resolveOptions = resolveOptions;\n\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\n\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\n\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n\n  return difference;\n}\n\nexports.setDifference = setDifference;\n\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\n\nfunction isRecord(value) {\n  let requiredKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = value.constructor;\n\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    } // Check to see if some method exists from the Object exists\n\n\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\n\nfunction deepCopy(value) {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item));\n  } else if (isRecord(value)) {\n    const res = {};\n\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n\n    return res;\n  }\n\n  const ctor = value.constructor;\n\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n\n      case 'map':\n        return new Map(value);\n\n      case 'set':\n        return new Set(value);\n\n      case 'buffer':\n        return Buffer.from(value);\n    }\n  }\n\n  return value;\n}\n\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\n\nclass List {\n  constructor() {\n    this.count = 0; // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    };\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n\n  get length() {\n    return this.count;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'List';\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n\n  *[Symbol.iterator]() {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n\n  *nodes() {\n    let ptr = this.head.next;\n\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const {\n        next\n      } = ptr;\n      yield ptr;\n      ptr = next;\n    }\n  }\n  /** Insert at end of list */\n\n\n  push(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head,\n      prev: this.head.prev,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n  /** Inserts every item inside an iterable instead of the iterable itself */\n\n\n  pushMany(iterable) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n  /** Insert at front of list */\n\n\n  unshift(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head.next,\n      prev: this.head,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n\n  remove(node) {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n\n    this.count -= 1;\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n    return node.value;\n  }\n  /** Removes the first node at the front of the list */\n\n\n  shift() {\n    return this.remove(this.head.next);\n  }\n  /** Removes the last node at the end of the list */\n\n\n  pop() {\n    return this.remove(this.head.prev);\n  }\n  /** Iterates through the list and removes nodes where filter returns true */\n\n\n  prune(filter) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n\n  clear() {\n    this.count = 0;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  /** Returns the first item in the list, does not remove */\n\n\n  first() {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n  /** Returns the last item in the list, does not remove */\n\n\n  last() {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n\n}\n\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\n\nclass BufferPool {\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n\n  get length() {\n    return this.totalByteLength;\n  }\n  /** Adds a buffer to the internal buffer pool list */\n\n\n  append(buffer) {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n\n\n  getInt32() {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n\n    const firstBuffer = this.buffers.first();\n\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    } // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n\n\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0); // Put it back.\n\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n    return value;\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n\n\n  read(size) {\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    } // oversized request returns empty buffer\n\n\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    } // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n\n\n    const result = Buffer.allocUnsafe(size);\n\n    for (let bytesRead = 0; bytesRead < size;) {\n      const buffer = this.buffers.shift();\n\n      if (buffer == null) {\n        break;\n      }\n\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n      result.set(bytes, bytesRead);\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.BufferPool = BufferPool;\n/** @public */\n\nclass HostAddress {\n  constructor(hostString) {\n    this.host = undefined;\n    this.port = undefined;\n    this.socketPath = undefined;\n    this.isIPv6 = false;\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n\n    try {\n      url = new url_1.URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n\n    const hostname = url.hostname;\n    const port = url.port;\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n\n    this.host = normalized.toLowerCase();\n\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n\n    if (this.port === 0) {\n      throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n    }\n\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n\n  inspect() {\n    return `new HostAddress('${this.toString()}')`;\n  }\n\n  toString() {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n\n      return `${this.host}:${this.port}`;\n    }\n\n    return `${this.socketPath}`;\n  }\n\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord(_ref) {\n    let {\n      name,\n      port\n    } = _ref;\n    return HostAddress.fromHostPort(name, port);\n  }\n\n}\n\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\n\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\n\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\n\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\n\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\n\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\n\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\n\nfunction supportsRetryableWrites(server) {\n  if (!server) {\n    return false;\n  }\n\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== common_1.ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.supportsRetryableWrites = supportsRetryableWrites;\n\nfunction parsePackageVersion(_ref2) {\n  let {\n    version\n  } = _ref2;\n  const [major, minor, patch] = version.split('.').map(n => Number.parseInt(n, 10));\n  return {\n    major,\n    minor,\n    patch\n  };\n}\n\nexports.parsePackageVersion = parsePackageVersion;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\n\nfunction shuffle(sequence) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1; // And swap it with the current element\n\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\nexports.shuffle = shuffle; // TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\n\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\n\nfunction getMongoDBClientEncryption() {\n  let mongodbClientEncryption = null; // NOTE(NODE-4254): This is to get around the circular dependency between\n  // mongodb-client-encryption and the driver in the test scenarios.\n\n  if (typeof process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE === 'string' && process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE.length > 0) {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require(process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE);\n    } catch {// ignore\n    }\n  } else {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch {// ignore\n    }\n  }\n\n  return mongodbClientEncryption;\n}\n\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\n\nfunction compareObjectId(oid1, oid2) {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n\n  if (oid1 == null) {\n    return -1;\n  }\n\n  if (oid2 == null) {\n    return 1;\n  }\n\n  return oid1.id.compare(oid2.id);\n}\n\nexports.compareObjectId = compareObjectId;\n\nfunction parseInteger(value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\n\nexports.parseInteger = parseInteger;\n\nfunction parseUnsignedInteger(value) {\n  const parsedInt = parseInteger(value);\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n\nexports.parseUnsignedInteger = parseUnsignedInteger;","map":{"version":3,"mappings":"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","names":["exports","Number","MAX_SAFE_INTEGER","checkCollectionName","collectionName","error_1","indexOf","match","normalizeHintField","hint","finalHint","undefined","Array","isArray","forEach","param","name","TO_STRING","object","Object","prototype","toString","call","isObject","arg","mergeOptions","target","source","filterOptions","options","names","includes","applyRetryableWrites","db","s","_a","retryWrites","applyWriteConcern","sources","coll","collection","session","inTransaction","writeConcern","write_concern_1","fromOptions","assign","isPromiseLike","value","then","decorateWithCollation","command","capabilities","getTopology","collation","commandsTakeCollation","decorateWithReadConcern","readConcern","keys","length","decorateWithExplain","explain","verbosity","provider","topology","client","defaultMsgHandler","option","deprecateOptions","config","fn","process","noDeprecation","msgHandler","optionsWarned","Set","deprecated","args","optionsIndex","bind","deprecatedOption","deprecatedOptions","has","add","msg","emitWarning","logger","getLogger","warn","setPrototypeOf","ns","MongoDBNamespace","fromString","constructor","withCollection","namespace","collectionParts","split","join","makeCounter","seed","count","newCount","maybeCallback","promiseFn","callback","PromiseConstructor","promise_provider_1","get","promise","resolve","reject","result","error","databaseNamespace","uuidV4","crypto","randomBytes","maxWireVersion","topologyOrServer","loadBalanced","constants_1","hello","lastHello","description","eachAsync","arr","eachFn","idx","awaiting","eachCallback","err","eachAsyncSeries","arrayStrictEqual","arr2","every","elt","errorStrictEqual","lhs","rhs","message","makeStateMachine","stateTable","stateTransition","newState","legalStates","state","emit","NODE_DRIVER_VERSION","require","version","makeClientMetadata","metadata","driver","os","type","platform","architecture","arch","release","endianness","driverInfo","appName","buffer","Buffer","from","application","byteLength","slice","now","hrtime","Math","floor","calculateDurationInMs","started","elapsed","hasAtomicOperators","doc","document","resolveOptions","parent","_b","readPreference","_c","isSuperset","set","subset","elem","isHello","constants_2","setDifference","setA","setB","difference","delete","HAS_OWN","prop","hasOwnProperty","isRecord","requiredKeys","ctor","deepCopy","map","item","res","key","toLowerCase","Map","List","head","next","prev","Symbol","toStringTag","toArray","iterator","node","nodes","ptr","push","newNode","pushMany","iterable","unshift","remove","prevNode","nextNode","shift","pop","prune","filter","clear","first","last","BufferPool","buffers","totalByteLength","append","getInt32","firstBuffer","readInt32LE","top4Bytes","read","size","alloc","allocUnsafe","bytesRead","bytesRemaining","bytesReadable","min","bytes","subarray","HostAddress","hostString","escapedHost","endsWith","socketPath","decodeURIComponent","urlString","url","url_1","urlError","runtimeError","cause","hostname","port","normalized","startsWith","isIPv6","substring","host","parseInt","freeze","for","inspect","fromHostPort","fromSrvRecord","createPk","bson_1","code","emittedWarnings","emitWarningOnce","enumToString","en","values","supportsRetryableWrites","server","logicalSessionTimeoutMinutes","common_1","Standalone","parsePackageVersion","major","minor","patch","n","shuffle","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","commandSupportsReadConcern","aggregate","distinct","find","geoNear","mapReduce","out","inline","getMongoDBClientEncryption","mongodbClientEncryption","env","MONGODB_CLIENT_ENCRYPTION_OVERRIDE","compareObjectId","oid1","oid2","id","compare","parseInteger","trunc","parsedValue","String","isNaN","parseUnsignedInteger","parsedInt"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\utils.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport type { SrvRecord } from 'dns';\nimport * as os from 'os';\nimport { URL } from 'url';\n\nimport { Document, ObjectId, resolveBSONOptions } from './bson';\nimport type { Connection } from './cmap/connection';\nimport { MAX_SUPPORTED_WIRE_VERSION } from './cmap/wire_protocol/constants';\nimport type { Collection } from './collection';\nimport { LEGACY_HELLO_COMMAND } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport type { FindCursor } from './cursor/find_cursor';\nimport type { Db } from './db';\nimport {\n  AnyError,\n  MongoCompatibilityError,\n  MongoInvalidArgumentError,\n  MongoNotConnectedError,\n  MongoParseError,\n  MongoRuntimeError\n} from './error';\nimport type { Explain } from './explain';\nimport type { MongoClient } from './mongo_client';\nimport type { CommandOperationOptions, OperationParent } from './operations/command';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { ServerType } from './sdam/common';\nimport type { Server } from './sdam/server';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport { W, WriteConcern, WriteConcernOptions } from './write_concern';\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport type Callback<T = any> = (error?: AnyError, result?: T) => void;\n\nexport const MAX_JS_INT = Number.MAX_SAFE_INTEGER + 1;\n\nexport type AnyOptions = Document;\n\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nexport function checkCollectionName(collectionName: string): void {\n  if ('string' !== typeof collectionName) {\n    throw new MongoInvalidArgumentError('Collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n\n  if (\n    collectionName.indexOf('$') !== -1 &&\n    collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null\n  ) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  }\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\n\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nexport function normalizeHintField(hint?: Hint): Hint | undefined {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {} as Document;\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\nconst TO_STRING = (object: unknown) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n\nexport function isObject(arg: unknown): arg is object {\n  return '[object Object]' === TO_STRING(arg);\n}\n\n/** @internal */\nexport function mergeOptions<T, S>(target: T, source: S): T & S {\n  return { ...target, ...source };\n}\n\n/** @internal */\nexport function filterOptions(options: AnyOptions, names: ReadonlyArray<string>): AnyOptions {\n  const filterOptions: AnyOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n\n  // Filtered options\n  return filterOptions;\n}\n\ninterface HasRetryableWrites {\n  retryWrites?: boolean;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nexport function applyRetryableWrites<T extends HasRetryableWrites>(target: T, db?: Db): T {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\ninterface HasWriteConcern {\n  writeConcern?: WriteConcernOptions | WriteConcern | W;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\nexport function applyWriteConcern<T extends HasWriteConcern>(\n  target: T,\n  sources: { db?: Db; collection?: Collection },\n  options?: OperationOptions & WriteConcernOptions\n): T {\n  options = options ?? {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, { writeConcern });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, coll.writeConcern) });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, db.writeConcern) });\n  }\n\n  return target;\n}\n\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nexport function isPromiseLike<T = any>(value?: PromiseLike<T> | void): value is Promise<T> {\n  return !!value && typeof value.then === 'function';\n}\n\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nexport function decorateWithCollation(\n  command: Document,\n  target: MongoClient | Db | Collection,\n  options: AnyOptions\n): void {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nexport function decorateWithReadConcern(\n  command: Document,\n  coll: { s: { readConcern?: ReadConcern } },\n  options?: OperationOptions\n): void {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(command: Document, explain: Explain): Document {\n  if (command.explain) {\n    return command;\n  }\n\n  return { explain: command, verbosity: explain.verbosity };\n}\n\n/**\n * @internal\n */\nexport type TopologyProvider =\n  | MongoClient\n  | ClientSession\n  | FindCursor\n  | AbstractCursor\n  | Collection<any>\n  | Db;\n\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nexport function getTopology(provider: TopologyProvider): Topology {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('s' in provider && 'client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('s' in provider && 'db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n\n  throw new MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\n/**\n * Default message handler for generating deprecation warnings.\n * @internal\n *\n * @param name - function name\n * @param option - option name\n * @returns warning message\n */\nexport function defaultMsgHandler(name: string, option: string): string {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\n\nexport interface DeprecateOptionsConfig {\n  /** function name */\n  name: string;\n  /** options to deprecate */\n  deprecatedOptions: string[];\n  /** index of options object in function arguments array */\n  optionsIndex: number;\n  /** optional custom message handler to generate warnings */\n  msgHandler?(this: void, name: string, option: string): string;\n}\n\n/**\n * Deprecates a given function's options.\n * @internal\n *\n * @param this - the bound class if this is a method\n * @param config - configuration for deprecation\n * @param fn - the target function of deprecation\n * @returns modified function that warns once per deprecated option, and executes original function\n */\nexport function deprecateOptions(\n  this: unknown,\n  config: DeprecateOptionsConfig,\n  fn: (...args: any[]) => any\n): any {\n  if ((process as any).noDeprecation === true) {\n    return fn;\n  }\n\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n\n  const optionsWarned = new Set();\n  function deprecated(this: any, ...args: any[]) {\n    const options = args[config.optionsIndex] as AnyOptions;\n\n    // ensure options is a valid, non-empty object, otherwise short-circuit\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.bind(this)(...args); // call the function, no change\n    }\n\n    // interrupt the function call with a warning\n    for (const deprecatedOption of config.deprecatedOptions) {\n      if (deprecatedOption in options && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitWarning(msg);\n        if (this && 'getLogger' in this) {\n          const logger = this.getLogger();\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    }\n\n    return fn.bind(this)(...args);\n  }\n\n  // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n\n  return deprecated;\n}\n\n/** @internal */\nexport function ns(ns: string): MongoDBNamespace {\n  return MongoDBNamespace.fromString(ns);\n}\n\n/** @public */\nexport class MongoDBNamespace {\n  db: string;\n  collection: string | undefined;\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db: string, collection?: string) {\n    this.db = db;\n    this.collection = collection === '' ? undefined : collection;\n  }\n\n  toString(): string {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection: string): MongoDBNamespace {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace?: string): MongoDBNamespace {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\n\n/** @internal */\nexport function* makeCounter(seed = 0): Generator<number> {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\n/**\n * Helper for handling legacy callback support.\n */\nexport function maybeCallback<T>(promiseFn: () => Promise<T>, callback: null): Promise<T>;\nexport function maybeCallback<T>(\n  promiseFn: () => Promise<T>,\n  callback?: Callback<T>\n): Promise<T> | void;\nexport function maybeCallback<T>(\n  promiseFn: () => Promise<T>,\n  callback?: Callback<T> | null\n): Promise<T> | void {\n  const PromiseConstructor = PromiseProvider.get();\n\n  const promise = promiseFn();\n  if (callback == null) {\n    if (PromiseConstructor == null) {\n      return promise;\n    } else {\n      return new PromiseConstructor((resolve, reject) => {\n        promise.then(resolve, reject);\n      });\n    }\n  }\n\n  promise.then(\n    result => callback(undefined, result),\n    error => callback(error)\n  );\n  return;\n}\n\n/** @internal */\nexport function databaseNamespace(ns: string): string {\n  return ns.split('.')[0];\n}\n\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nexport function uuidV4(): Buffer {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nexport function maxWireVersion(topologyOrServer?: Connection | Topology | Server): number {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      return MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (\n      topologyOrServer.description &&\n      'maxWireVersion' in topologyOrServer.description &&\n      topologyOrServer.description.maxWireVersion != null\n    ) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nexport function eachAsync<T = Document>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\n/** @internal */\nexport function eachAsyncSeries<T = any>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = arr.length;\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    idx++;\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n\n    eachFn(arr[idx], eachCallback);\n  }\n\n  eachFn(arr[idx], eachCallback);\n}\n\n/** @internal */\nexport function arrayStrictEqual(arr: unknown[], arr2: unknown[]): boolean {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\n/** @internal */\nexport function errorStrictEqual(lhs?: AnyError | null, rhs?: AnyError | null): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\ninterface StateTable {\n  [key: string]: string[];\n}\ninterface ObjectWithState {\n  s: { state: string };\n  emit(event: 'stateChanged', state: string, newState: string): void;\n}\ninterface StateTransitionFunction {\n  (target: ObjectWithState, newState: string): void;\n}\n\n/** @public */\nexport type EventEmitterWithState = {\n  /** @internal */\n  stateChanged(previous: string, current: string): void;\n};\n\n/** @internal */\nexport function makeStateMachine(stateTable: StateTable): StateTransitionFunction {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new MongoRuntimeError(\n        `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`\n      );\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\n/** @public */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name: NodeJS.Platform;\n    architecture: string;\n    version: string;\n  };\n  platform: string;\n  version?: string;\n  application?: {\n    name: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../package.json').version;\n\nexport function makeClientMetadata(options?: ClientMetadataOptions): ClientMetadata {\n  options = options ?? {};\n\n  const metadata: ClientMetadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  };\n\n  // support optionally provided wrapping driver info\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n\n  return metadata;\n}\n\n/** @internal */\nexport function now(): number {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\n/** @internal */\nexport function calculateDurationInMs(started: number): number {\n  if (typeof started !== 'number') {\n    throw new MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\n/** @internal */\nexport function hasAtomicOperators(doc: Document | Document[]): boolean {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nexport function resolveOptions<T extends CommandOperationOptions>(\n  parent: OperationParent | undefined,\n  options?: T\n): T {\n  const result: T = Object.assign({}, options, resolveBSONOptions(options, parent));\n\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexport function isSuperset(set: Set<any> | any[], subset: Set<any> | any[]): boolean {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nexport function isHello(doc: Document): boolean {\n  return doc[LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\n/** Returns the items that are uniquely in setA */\nexport function setDifference<T>(setA: Iterable<T>, setB: Iterable<T>): Set<T> {\n  const difference = new Set<T>(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\n\nconst HAS_OWN = (object: unknown, prop: string) =>\n  Object.prototype.hasOwnProperty.call(object, prop);\n\nexport function isRecord<T extends readonly string[]>(\n  value: unknown,\n  requiredKeys: T\n): value is Record<T[number], any>;\nexport function isRecord(value: unknown): value is Record<string, any>;\nexport function isRecord(\n  value: unknown,\n  requiredKeys: string[] | undefined = undefined\n): value is Record<string, any> {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value as Record<string, any>);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nexport function deepCopy<T>(value: T): T {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item)) as unknown as T;\n  } else if (isRecord(value)) {\n    const res = {} as any;\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value as any) as unknown as T;\n      case 'set':\n        return new Set(value as any) as unknown as T;\n      case 'buffer':\n        return Buffer.from(value as unknown as Buffer) as unknown as T;\n    }\n  }\n\n  return value;\n}\n\ntype ListNode<T> = {\n  value: T;\n  next: ListNode<T> | HeadNode<T>;\n  prev: ListNode<T> | HeadNode<T>;\n};\n\ntype HeadNode<T> = {\n  value: null;\n  next: ListNode<T>;\n  prev: ListNode<T>;\n};\n\n/**\n * When a list is empty the head is a reference with pointers to itself\n * So this type represents that self referential state\n */\ntype EmptyNode = {\n  value: null;\n  next: EmptyNode;\n  prev: EmptyNode;\n};\n\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nexport class List<T = unknown> {\n  private readonly head: HeadNode<T> | EmptyNode;\n  private count: number;\n\n  get length() {\n    return this.count;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'List' as const;\n  }\n\n  constructor() {\n    this.count = 0;\n\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    } as unknown as EmptyNode;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n\n  *[Symbol.iterator](): Generator<T, void, void> {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n\n  private *nodes(): Generator<ListNode<T>, void, void> {\n    let ptr: HeadNode<T> | ListNode<T> | EmptyNode = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const { next } = ptr as ListNode<T>;\n      yield ptr as ListNode<T>;\n      ptr = next;\n    }\n  }\n\n  /** Insert at end of list */\n  push(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head as HeadNode<T>,\n      prev: this.head.prev as ListNode<T>,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable: Iterable<T>) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n\n  /** Insert at front of list */\n  unshift(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head.next as ListNode<T>,\n      prev: this.head as HeadNode<T>,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n\n  private remove(node: ListNode<T> | EmptyNode): T | null {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n\n    this.count -= 1;\n\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n\n    return node.value;\n  }\n\n  /** Removes the first node at the front of the list */\n  shift(): T | null {\n    return this.remove(this.head.next);\n  }\n\n  /** Removes the last node at the end of the list */\n  pop(): T | null {\n    return this.remove(this.head.prev);\n  }\n\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter: (value: T) => boolean) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n\n  clear() {\n    this.count = 0;\n    this.head.next = this.head as EmptyNode;\n    this.head.prev = this.head as EmptyNode;\n  }\n\n  /** Returns the first item in the list, does not remove */\n  first(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n\n  /** Returns the last item in the list, does not remove */\n  last(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\n\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nexport class BufferPool {\n  private buffers: List<Buffer>;\n  private totalByteLength: number;\n\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n\n  get length(): number {\n    return this.totalByteLength;\n  }\n\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer: Buffer): void {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32(): number | null {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n\n    return value;\n  }\n\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size: number): Buffer {\n    if (typeof size !== 'number' || size < 0) {\n      throw new MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n\n    for (let bytesRead = 0; bytesRead < size; ) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n\n      result.set(bytes, bytesRead);\n\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n\n    return result;\n  }\n}\n\n/** @public */\nexport class HostAddress {\n  host: string | undefined = undefined;\n  port: number | undefined = undefined;\n  socketPath: string | undefined = undefined;\n  isIPv6 = false;\n\n  constructor(hostString: string) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n\n    const hostname = url.hostname;\n    const port = url.port;\n\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n\n    this.host = normalized.toLowerCase();\n\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n\n    if (this.port === 0) {\n      throw new MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new HostAddress('${this.toString()}')`;\n  }\n\n  toString(): string {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n\n  static fromString(this: void, s: string): HostAddress {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host: string, port: number): HostAddress {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord({ name, port }: SrvRecord): HostAddress {\n    return HostAddress.fromHostPort(name, port);\n  }\n}\n\nexport const DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk(): ObjectId {\n    return new ObjectId();\n  }\n};\n\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexport const MONGODB_WARNING_CODE = 'MONGODB DRIVER' as const;\n\n/** @internal */\nexport function emitWarning(message: string): void {\n  return process.emitWarning(message, { code: MONGODB_WARNING_CODE } as any);\n}\n\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nexport function emitWarningOnce(message: string): void {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nexport function enumToString(en: Record<string, unknown>): string {\n  return Object.values(en).join(', ');\n}\n\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nexport function supportsRetryableWrites(server?: Server): boolean {\n  if (!server) {\n    return false;\n  }\n\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function parsePackageVersion({ version }: { version: string }): {\n  major: number;\n  minor: number;\n  patch: number;\n} {\n  const [major, minor, patch] = version.split('.').map((n: string) => Number.parseInt(n, 10));\n  return { major, minor, patch };\n}\n\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nexport function shuffle<T>(sequence: Iterable<T>, limit = 0): Array<T> {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nexport function commandSupportsReadConcern(command: Document, options?: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (\n    command.mapReduce &&\n    options &&\n    options.out &&\n    (options.out.inline === 1 || options.out === 'inline')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nexport function getMongoDBClientEncryption(): {\n  extension: (mdb: unknown) => {\n    AutoEncrypter: any;\n    ClientEncryption: any;\n  };\n} | null {\n  let mongodbClientEncryption = null;\n\n  // NOTE(NODE-4254): This is to get around the circular dependency between\n  // mongodb-client-encryption and the driver in the test scenarios.\n  if (\n    typeof process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE === 'string' &&\n    process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE.length > 0\n  ) {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require(process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE);\n    } catch {\n      // ignore\n    }\n  } else {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch {\n      // ignore\n    }\n  }\n\n  return mongodbClientEncryption;\n}\n\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nexport function compareObjectId(oid1?: ObjectId | null, oid2?: ObjectId | null): 0 | 1 | -1 {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n\n  if (oid1 == null) {\n    return -1;\n  }\n\n  if (oid2 == null) {\n    return 1;\n  }\n\n  return oid1.id.compare(oid2.id);\n}\n\nexport function parseInteger(value: unknown): number | null {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\n\nexport function parseUnsignedInteger(value: unknown): number | null {\n  const parsedInt = parseInteger(value);\n\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n"]},"metadata":{},"sourceType":"script"}