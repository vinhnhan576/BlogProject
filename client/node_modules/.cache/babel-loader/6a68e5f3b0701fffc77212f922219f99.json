{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.BSON = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Map = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.calculateObjectSize = exports.serialize = exports.deserialize = void 0;\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\n\nlet BSON = require('bson');\n\nexports.BSON = BSON;\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.BSON = BSON = require('bson-ext');\n} catch {} // eslint-disable-line\n\n/** @internal */\n\n\nexports.deserialize = BSON.deserialize;\n/** @internal */\n\nexports.serialize = BSON.serialize;\n/** @internal */\n\nexports.calculateObjectSize = BSON.calculateObjectSize;\n\nvar bson_1 = require(\"bson\");\n\nObject.defineProperty(exports, \"Binary\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Binary;\n  }\n});\nObject.defineProperty(exports, \"BSONRegExp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONRegExp;\n  }\n});\nObject.defineProperty(exports, \"BSONSymbol\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONSymbol;\n  }\n});\nObject.defineProperty(exports, \"Code\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Code;\n  }\n});\nObject.defineProperty(exports, \"DBRef\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.DBRef;\n  }\n});\nObject.defineProperty(exports, \"Decimal128\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Decimal128;\n  }\n});\nObject.defineProperty(exports, \"Double\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Double;\n  }\n});\nObject.defineProperty(exports, \"Int32\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Int32;\n  }\n});\nObject.defineProperty(exports, \"Long\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Long;\n  }\n});\nObject.defineProperty(exports, \"Map\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Map;\n  }\n});\nObject.defineProperty(exports, \"MaxKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MaxKey;\n  }\n});\nObject.defineProperty(exports, \"MinKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MinKey;\n  }\n});\nObject.defineProperty(exports, \"ObjectId\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.ObjectId;\n  }\n});\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Timestamp;\n  }\n});\n\nfunction pluckBSONSerializeOptions(options) {\n  const {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\n\nfunction resolveBSONOptions(options, parent) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n\n  const parentOptions = parent === null || parent === void 0 ? void 0 : parent.bsonOptions;\n  return {\n    raw: (_b = (_a = options === null || options === void 0 ? void 0 : options.raw) !== null && _a !== void 0 ? _a : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.raw) !== null && _b !== void 0 ? _b : false,\n    promoteLongs: (_d = (_c = options === null || options === void 0 ? void 0 : options.promoteLongs) !== null && _c !== void 0 ? _c : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteLongs) !== null && _d !== void 0 ? _d : true,\n    promoteValues: (_f = (_e = options === null || options === void 0 ? void 0 : options.promoteValues) !== null && _e !== void 0 ? _e : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteValues) !== null && _f !== void 0 ? _f : true,\n    promoteBuffers: (_h = (_g = options === null || options === void 0 ? void 0 : options.promoteBuffers) !== null && _g !== void 0 ? _g : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteBuffers) !== null && _h !== void 0 ? _h : false,\n    ignoreUndefined: (_k = (_j = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _j !== void 0 ? _j : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.ignoreUndefined) !== null && _k !== void 0 ? _k : false,\n    bsonRegExp: (_m = (_l = options === null || options === void 0 ? void 0 : options.bsonRegExp) !== null && _l !== void 0 ? _l : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.bsonRegExp) !== null && _m !== void 0 ? _m : false,\n    serializeFunctions: (_p = (_o = options === null || options === void 0 ? void 0 : options.serializeFunctions) !== null && _o !== void 0 ? _o : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.serializeFunctions) !== null && _p !== void 0 ? _p : false,\n    fieldsAsRaw: (_r = (_q = options === null || options === void 0 ? void 0 : options.fieldsAsRaw) !== null && _q !== void 0 ? _q : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.fieldsAsRaw) !== null && _r !== void 0 ? _r : {},\n    enableUtf8Validation: (_t = (_s = options === null || options === void 0 ? void 0 : options.enableUtf8Validation) !== null && _s !== void 0 ? _s : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.enableUtf8Validation) !== null && _t !== void 0 ? _t : true\n  };\n}\n\nexports.resolveBSONOptions = resolveBSONOptions;","map":{"version":3,"mappings":"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","names":["BSON","require","exports","deserialize","serialize","calculateObjectSize","Object","enumerable","get","pluckBSONSerializeOptions","options","fieldsAsRaw","promoteValues","promoteBuffers","promoteLongs","serializeFunctions","ignoreUndefined","bsonRegExp","raw","enableUtf8Validation","resolveBSONOptions","parent","parentOptions","bsonOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\bson.ts"],"sourcesContent":["import type {\n  calculateObjectSize as calculateObjectSizeFn,\n  deserialize as deserializeFn,\n  DeserializeOptions,\n  serialize as serializeFn,\n  SerializeOptions\n} from 'bson';\n\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nlet BSON = require('bson');\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  BSON = require('bson-ext');\n} catch {} // eslint-disable-line\n\n/** @internal */\nexport const deserialize = BSON.deserialize as typeof deserializeFn;\n/** @internal */\nexport const serialize = BSON.serialize as typeof serializeFn;\n/** @internal */\nexport const calculateObjectSize = BSON.calculateObjectSize as typeof calculateObjectSizeFn;\n\nexport {\n  Binary,\n  BSONRegExp,\n  BSONSymbol,\n  Code,\n  DBRef,\n  Decimal128,\n  Document,\n  Double,\n  Int32,\n  Long,\n  Map,\n  MaxKey,\n  MinKey,\n  ObjectId,\n  Timestamp\n} from 'bson';\n\n/** @internal */\nexport { BSON };\n\n/**\n * BSON Serialization options.\n * @public\n */\nexport interface BSONSerializeOptions\n  extends Omit<SerializeOptions, 'index'>,\n    Omit<\n      DeserializeOptions,\n      | 'evalFunctions'\n      | 'cacheFunctions'\n      | 'cacheFunctionsCrc32'\n      | 'allowObjectSmallerThanBufferSize'\n      | 'index'\n      | 'validation'\n    > {\n  /**\n   * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)\n   * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).\n   * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)\n   * for more detail about what \"unsafe\" refers to in this context.\n   * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate\n   * your own buffer and clone the contents:\n   *\n   * @example\n   * ```ts\n   * const raw = await collection.findOne({}, { raw: true });\n   * const myBuffer = Buffer.alloc(raw.byteLength);\n   * myBuffer.set(raw, 0);\n   * // Only save and use `myBuffer` beyond this point\n   * ```\n   *\n   * @remarks\n   * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).\n   * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.\n   */\n  raw?: boolean;\n\n  /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\n  enableUtf8Validation?: boolean;\n}\n\nexport function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions {\n  const {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nexport function resolveBSONOptions(\n  options?: BSONSerializeOptions,\n  parent?: { bsonOptions?: BSONSerializeOptions }\n): BSONSerializeOptions {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation:\n      options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\n"]},"metadata":{},"sourceType":"script"}