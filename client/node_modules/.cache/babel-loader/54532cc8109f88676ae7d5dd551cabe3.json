{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst delete_1 = require(\"../operations/delete\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst insert_1 = require(\"../operations/insert\");\n\nconst operation_1 = require(\"../operations/operation\");\n\nconst update_1 = require(\"../operations/update\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\n\n\nconst kServerError = Symbol('serverError');\n/** @public */\n\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\n\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n\n}\n\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\n\nclass BulkWriteResult {\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    var _a;\n\n    return (_a = this.result.nInserted) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    var _a;\n\n    return (_a = this.result.nMatched) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    var _a;\n\n    return (_a = this.result.nModified) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    var _a;\n\n    return (_a = this.result.nRemoved) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    var _a;\n\n    return (_a = this.result.upserted.length) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    var _a;\n\n    const upserted = {};\n\n    for (const doc of (_a = this.result.upserted) !== null && _a !== void 0 ? _a : []) {\n      upserted[doc.index] = doc._id;\n    }\n\n    return upserted;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    var _a;\n\n    const inserted = {};\n\n    for (const doc of (_a = this.result.insertedIds) !== null && _a !== void 0 ? _a : []) {\n      inserted[doc.index] = doc._id;\n    }\n\n    return inserted;\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n\n\n  get ok() {\n    return this.result.ok;\n  }\n  /** The number of inserted documents */\n\n\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /** Number of upserted documents */\n\n\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /** Number of matched documents */\n\n\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /** Number of documents updated physically on disk */\n\n\n  get nModified() {\n    return this.result.nModified;\n  }\n  /** Number of removed documents */\n\n\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /** Returns an array of all inserted ids */\n\n\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Returns an array of all upserted ids */\n\n\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n\n\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n\n\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n\n\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n\n\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n\n\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n\n\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /**\n   * Retrieve lastOp if available\n   *\n   * @deprecated Will be removed in 5.0\n   */\n\n\n  getLastOp() {\n    return this.result.opTime;\n  }\n  /** Retrieve the write concern error if one exists */\n\n\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg; // TODO: Something better\n\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n  /* @deprecated Will be removed in 5.0 release */\n\n\n  toJSON() {\n    return this.result;\n  }\n\n  toString() {\n    return `BulkWriteResult(${this.toJSON()})`;\n  }\n\n  isOk() {\n    return this.result.ok === 1;\n  }\n\n}\n\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\n\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n\n\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n\n\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n\n\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n\n\n  get err() {\n    return this[kServerError];\n  }\n\n  toJSON() {\n    return this[kServerError];\n  }\n\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n\n}\n\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\n\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n\n\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n\n\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n\n\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n\n\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n\n\n  getOperation() {\n    return this.err.op;\n  }\n\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n\n}\n\nexports.WriteError = WriteError;\n/** Converts the number to a Long or returns it. */\n\nfunction longOrConvert(value) {\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  return typeof value === 'number' ? bson_1.Long.fromNumber(value) : value;\n}\n/** Merges results into shared data structure */\n\n\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  } // Do we have a top level error stop processing and return\n\n\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  } // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n\n\n  if (result.opTime || result.lastOp) {\n    let opTime = result.lastOp || result.opTime; // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = {\n        ts: opTime,\n        t: bson_1.Long.ZERO\n      };\n    } // If there's no lastOp, just set it.\n\n\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      const opTimeTS = longOrConvert(opTime.ts);\n\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\n        const opTimeT = longOrConvert(opTime.t);\n\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  } // If we have an insert Batch type\n\n\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  } // If we have an insert Batch type\n\n\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0; // We have an array of upserted values, we need to rewrite the indexes\n\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  } // If we have an update Batch type\n\n\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nexports.mergeBatchResults = mergeBatchResults;\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    } // Merge the results together\n\n\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return; // Execute the next command in line\n\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, { ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  } // Set an operationIf if provided\n\n\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  } // Is the checkKeys option disabled\n\n\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  var _a, _b;\n\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: (_a = err.result) === null || _a === void 0 ? void 0 : _a.writeConcernError.errmsg,\n    code: (_b = err.result) === null || _b === void 0 ? void 0 : _b.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\n\n\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    var _a;\n\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = (_a = error.writeErrors) !== null && _a !== void 0 ? _a : [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n\n}\n\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\n\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n\n\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n\n\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n\n\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n\n\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n\n\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n\n\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n\n\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n\n\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n  /** Specifies hint for the bulk operation. */\n\n\n  hint(hint) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n\n}\n\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\n\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n\n}\n/** @public */\n\n\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options; // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n\n    const namespace = collection.s.namespace; // Used to mark operation as executed\n\n    const executed = false; // Current item\n\n    const currentOp = undefined; // Set max byte size\n\n    const hello = topology.lastHello(); // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000; // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2; // Final options for retryable writes\n\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db); // Final results\n\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    }; // Internal state\n\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    }; // bypass Validation\n\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    } // Save a current selector\n\n\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n\n\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne,\n          multi: false\n        });\n\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, { ...op.updateOne,\n          multi: false\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, { ...op.updateMany,\n          multi: true\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne,\n        limit: 1\n      }));\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany,\n        limit: 0\n      }));\n    } // otherwise an unknown operation was provided\n\n\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get batches() {\n    const batches = [...this.s.batches];\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n\n    return batches;\n  }\n\n  execute(options, callback) {\n    callback = typeof callback === 'function' ? callback : typeof options === 'function' ? options : undefined;\n    return (0, utils_1.maybeCallback)(async () => {\n      options = options != null && typeof options !== 'function' ? options : {};\n\n      if (this.s.executed) {\n        throw new error_1.MongoBatchReExecutionError();\n      }\n\n      const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n      if (writeConcern) {\n        this.s.writeConcern = writeConcern;\n      } // If we have current batch\n\n\n      if (this.isOrdered) {\n        if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n      } // If we have no operations in the bulk raise an error\n\n\n      if (this.s.batches.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n      }\n\n      this.s.executed = true;\n      const finalOptions = { ...this.s.options,\n        ...options\n      };\n      const operation = new BulkWriteShimOperation(this, finalOptions);\n      return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation);\n    }, callback);\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n\n  get() {\n    return this.s.currentIndex;\n  }\n\n});\n\nfunction shouldForceServerObjectId(bulkOperation) {\n  var _a, _b;\n\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof ((_a = bulkOperation.s.collection.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId) === 'boolean') {\n    return (_b = bulkOperation.s.collection.s.db.options) === null || _b === void 0 ? void 0 : _b.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"mappings":"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","names":["kServerError","Symbol","exports","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","bulkResult","result","insertedCount","nInserted","_a","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","doc","index","_id","insertedIds","inserted","ok","nUpserted","getInsertedIds","getUpsertedIds","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getLastOp","opTime","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","error_1","WriteConcernFailed","toJSON","toString","isOk","error","errInfo","WriteError","getOperation","op","JSON","stringify","longOrConvert","value","bson_1","fromNumber","mergeBatchResults","batch","writeError","message","push","lastOp","_bsontype","ts","t","ZERO","lastOpTS","opTimeTS","greaterThan","equals","lastOpT","opTimeT","isInsertBatch","n","isDeleteBatch","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","mergeResult","handleWriteError","finalOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","collection","db","client","insert_1","namespace","update_1","delete_1","_b","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","selector","updateOne","replaceOne","replacement","deleteOne","delete","upsert","collation","arrayFilters","hint","BulkWriteShimOperation","operation_1","execute","server","session","BulkOperationBase","topology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","write_concern_1","fromOptions","bsonOptions","insert","document","shouldForceServerObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","operation","msg","defineProperty","prototype","enumerable","get","bulkOp"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import {\n  BSONSerializeOptions,\n  Document,\n  Long,\n  ObjectId,\n  resolveBSONOptions,\n  Timestamp\n} from '../bson';\nimport type { Collection } from '../collection';\nimport {\n  AnyError,\n  MongoBatchReExecutionError,\n  MONGODB_ERROR_CODES,\n  MongoInvalidArgumentError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\nimport { DeleteOperation, DeleteStatement, makeDeleteStatement } from '../operations/delete';\nimport { executeOperation } from '../operations/execute_operation';\nimport { InsertOperation } from '../operations/insert';\nimport { AbstractOperation, Hint } from '../operations/operation';\nimport { makeUpdateStatement, UpdateOperation, UpdateStatement } from '../operations/update';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport {\n  applyRetryableWrites,\n  Callback,\n  getTopology,\n  hasAtomicOperators,\n  maybeCallback,\n  MongoDBNamespace,\n  resolveOptions\n} from '../utils';\nimport { WriteConcern } from '../write_concern';\n\n/** @internal */\nconst kServerError = Symbol('serverError');\n\n/** @public */\nexport const BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n} as const);\n\n/** @public */\nexport type BatchType = typeof BatchType[keyof typeof BatchType];\n\n/** @public */\nexport interface InsertOneModel<TSchema extends Document = Document> {\n  /** The document to insert. */\n  document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport interface DeleteOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface DeleteManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the replaced document. */\n  filter: Filter<TSchema>;\n  /** The document with which to replace the matched document. */\n  replacement: WithoutId<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\n  | { insertOne: InsertOneModel<TSchema> }\n  | { replaceOne: ReplaceOneModel<TSchema> }\n  | { updateOne: UpdateOneModel<TSchema> }\n  | { updateMany: UpdateManyModel<TSchema> }\n  | { deleteOne: DeleteOneModel<TSchema> }\n  | { deleteMany: DeleteManyModel<TSchema> };\n\n/**\n * @public\n *\n * @deprecated Will be made internal in 5.0\n */\nexport interface BulkResult {\n  ok: number;\n  writeErrors: WriteError[];\n  writeConcernErrors: WriteConcernError[];\n  insertedIds: Document[];\n  nInserted: number;\n  nUpserted: number;\n  nMatched: number;\n  nModified: number;\n  nRemoved: number;\n  upserted: Document[];\n  opTime?: Document;\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport class Batch<T = Document> {\n  originalZeroIndex: number;\n  currentIndex: number;\n  originalIndexes: number[];\n  batchType: BatchType;\n  operations: T[];\n  size: number;\n  sizeBytes: number;\n\n  constructor(batchType: BatchType, originalZeroIndex: number) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport class BulkWriteResult {\n  /** @deprecated Will be removed in 5.0 */\n  result: BulkResult;\n\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult: BulkResult) {\n    this.result = bulkResult;\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.nInserted ?? 0;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.nMatched ?? 0;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.nModified ?? 0;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.nRemoved ?? 0;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upserted.length ?? 0;\n  }\n\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    const upserted: { [index: number]: any } = {};\n    for (const doc of this.result.upserted ?? []) {\n      upserted[doc.index] = doc._id;\n    }\n    return upserted;\n  }\n\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    const inserted: { [index: number]: any } = {};\n    for (const doc of this.result.insertedIds ?? []) {\n      inserted[doc.index] = doc._id;\n    }\n    return inserted;\n  }\n\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok(): number {\n    return this.result.ok;\n  }\n\n  /** The number of inserted documents */\n  get nInserted(): number {\n    return this.result.nInserted;\n  }\n\n  /** Number of upserted documents */\n  get nUpserted(): number {\n    return this.result.nUpserted;\n  }\n\n  /** Number of matched documents */\n  get nMatched(): number {\n    return this.result.nMatched;\n  }\n\n  /** Number of documents updated physically on disk */\n  get nModified(): number {\n    return this.result.nModified;\n  }\n\n  /** Number of removed documents */\n  get nRemoved(): number {\n    return this.result.nRemoved;\n  }\n\n  /** Returns an array of all inserted ids */\n  getInsertedIds(): Document[] {\n    return this.result.insertedIds;\n  }\n\n  /** Returns an array of all upserted ids */\n  getUpsertedIds(): Document[] {\n    return this.result.upserted;\n  }\n\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index: number): Document | undefined {\n    return this.result.upserted[index];\n  }\n\n  /** Returns raw internal result */\n  getRawResponse(): Document {\n    return this.result;\n  }\n\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors(): boolean {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount(): number {\n    return this.result.writeErrors.length;\n  }\n\n  /** Returns a specific write error object */\n  getWriteErrorAt(index: number): WriteError | undefined {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n\n  /** Retrieve all write errors */\n  getWriteErrors(): WriteError[] {\n    return this.result.writeErrors;\n  }\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @deprecated Will be removed in 5.0\n   */\n  getLastOp(): Document | undefined {\n    return this.result.opTime;\n  }\n\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError(): WriteConcernError | undefined {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\n    }\n  }\n\n  /* @deprecated Will be removed in 5.0 release */\n  toJSON(): BulkResult {\n    return this.result;\n  }\n\n  toString(): string {\n    return `BulkWriteResult(${this.toJSON()})`;\n  }\n\n  isOk(): boolean {\n    return this.result.ok === 1;\n  }\n}\n\n/** @public */\nexport interface WriteConcernErrorData {\n  code: number;\n  errmsg: string;\n  errInfo?: Document;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport class WriteConcernError {\n  /** @internal */\n  [kServerError]: WriteConcernErrorData;\n\n  constructor(error: WriteConcernErrorData) {\n    this[kServerError] = error;\n  }\n\n  /** Write concern error code. */\n  get code(): number | undefined {\n    return this[kServerError].code;\n  }\n\n  /** Write concern error message. */\n  get errmsg(): string | undefined {\n    return this[kServerError].errmsg;\n  }\n\n  /** Write concern error info. */\n  get errInfo(): Document | undefined {\n    return this[kServerError].errInfo;\n  }\n\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n  get err(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toJSON(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toString(): string {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\n\n/** @public */\nexport interface BulkWriteOperationError {\n  index: number;\n  code: number;\n  errmsg: string;\n  errInfo: Document;\n  op: Document | UpdateStatement | DeleteStatement;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport class WriteError {\n  err: BulkWriteOperationError;\n\n  constructor(err: BulkWriteOperationError) {\n    this.err = err;\n  }\n\n  /** WriteError code. */\n  get code(): number {\n    return this.err.code;\n  }\n\n  /** WriteError original bulk operation index. */\n  get index(): number {\n    return this.err.index;\n  }\n\n  /** WriteError message. */\n  get errmsg(): string | undefined {\n    return this.err.errmsg;\n  }\n\n  /** WriteError details. */\n  get errInfo(): Document | undefined {\n    return this.err.errInfo;\n  }\n\n  /** Returns the underlying operation that caused the error */\n  getOperation(): Document {\n    return this.err.op;\n  }\n\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  toString(): string {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/** Converts the number to a Long or returns it. */\nfunction longOrConvert(value: number | Long | Timestamp): Long | Timestamp {\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  return typeof value === 'number' ? Long.fromNumber(value) : value;\n}\n\n/** Merges results into shared data structure */\nexport function mergeBatchResults(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err?: AnyError,\n  result?: Document\n): void {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n  if (result.opTime || result.lastOp) {\n    let opTime = result.lastOp || result.opTime;\n\n    // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = { ts: opTime, t: Long.ZERO };\n    }\n\n    // If there's no lastOp, just set it.\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      const opTimeTS = longOrConvert(opTime.ts);\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\n        const opTimeT = longOrConvert(opTime.t);\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  }\n\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(\n  bulkOperation: BulkOperationBase,\n  options: BulkWriteOptions,\n  callback: Callback<BulkWriteResult>\n) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift() as Batch;\n\n  function resultHandler(err?: AnyError, result?: Document) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\n      return callback(\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\n      );\n    }\n\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = resolveOptions(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites =\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isUpdateBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isDeleteBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err: MongoWriteConcernError,\n  callback: Callback<BulkWriteResult>\n) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n\n  callback(\n    new MongoBulkWriteError(\n      {\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n      },\n      new BulkWriteResult(bulkResult)\n    )\n  );\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport class MongoBulkWriteError extends MongoServerError {\n  result: BulkWriteResult;\n  writeErrors: OneOrMore<WriteError> = [];\n  err?: WriteConcernError;\n\n  /** Creates a new MongoBulkWriteError */\n  constructor(\n    error:\n      | { message: string; code: number; writeErrors?: WriteError[] }\n      | WriteConcernError\n      | AnyError,\n    result: BulkWriteResult\n  ) {\n    super(error);\n\n    if (error instanceof WriteConcernError) this.err = error;\n    else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  override get name(): string {\n    return 'MongoBulkWriteError';\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport class FindOperators {\n  bulkOperation: BulkOperationBase;\n\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation: BulkOperationBase) {\n    this.bulkOperation = bulkOperation;\n  }\n\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument: Document | Document[]): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, {\n        ...currentOp,\n        multi: true\n      })\n    );\n  }\n\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument: Document | Document[]): BulkOperationBase {\n    if (!hasAtomicOperators(updateDocument)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement: Document): BulkOperationBase {\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a delete one operation to the bulk operation */\n  deleteOne(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\n    );\n  }\n\n  /** Add a delete many operation to the bulk operation */\n  delete(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\n    );\n  }\n\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert(): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /** Specifies the collation for the query condition. */\n  collation(collation: CollationOptions): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters: Document[]): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n  /** Specifies hint for the bulk operation. */\n  hint(hint: Hint): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\n\n/** @internal */\nexport interface BulkOperationPrivate {\n  bulkResult: BulkResult;\n  currentBatch?: Batch;\n  currentIndex: number;\n  // ordered specific\n  currentBatchSize: number;\n  currentBatchSizeBytes: number;\n  // unordered specific\n  currentInsertBatch?: Batch;\n  currentUpdateBatch?: Batch;\n  currentRemoveBatch?: Batch;\n  batches: Batch[];\n  // Write concern\n  writeConcern?: WriteConcern;\n  // Max batch size options\n  maxBsonObjectSize: number;\n  maxBatchSizeBytes: number;\n  maxWriteBatchSize: number;\n  maxKeySize: number;\n  // Namespace\n  namespace: MongoDBNamespace;\n  // Topology\n  topology: Topology;\n  // Options\n  options: BulkWriteOptions;\n  // BSON options\n  bsonOptions: BSONSerializeOptions;\n  // Document used to build a bulk operation\n  currentOp?: Document;\n  // Executed\n  executed: boolean;\n  // Collection\n  collection: Collection;\n  // Fundamental error\n  err?: AnyError;\n  // check keys\n  checkKeys: boolean;\n  bypassDocumentValidation?: boolean;\n}\n\n/** @public */\nexport interface BulkWriteOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n  ordered?: boolean;\n  /** @deprecated use `ordered` instead */\n  keepGoing?: boolean;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends AbstractOperation {\n  bulkOperation: BulkOperationBase;\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server: Server, session: ClientSession | undefined, callback: Callback<any>): void {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n}\n\n/** @public */\nexport abstract class BulkOperationBase {\n  isOrdered: boolean;\n  /** @internal */\n  s: BulkOperationPrivate;\n  operationId?: number;\n\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    const topology = getTopology(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = undefined;\n\n    // Set max byte size\n    const hello = topology.lastHello();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n\n    // Final results\n    const bulkResult: BulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: resolveBSONOptions(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document: Document): BulkOperationBase {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new ObjectId();\n    }\n\n    return this.addToOperationsList(BatchType.INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector: Document): FindOperators {\n    if (!selector) {\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op: AnyBulkWriteOperation): this {\n    if (op == null || typeof op !== 'object') {\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\n          (op.insertOne as Document)._id = new ObjectId();\n        }\n\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new ObjectId();\n      }\n\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(\n          op.replaceOne.filter,\n          op.replaceOne.replacement,\n          { ...op.replaceOne, multi: false }\n        );\n        if (hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\n      );\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\n      );\n    }\n\n    // otherwise an unknown operation was provided\n    throw new MongoInvalidArgumentError(\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\n    );\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get batches(): Batch[] {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n\n  execute(options?: BulkWriteOptions): Promise<BulkWriteResult>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  execute(callback: Callback<BulkWriteResult>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  execute(options: BulkWriteOptions | undefined, callback: Callback<BulkWriteResult>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  execute(\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\n    callback?: Callback<BulkWriteResult>\n  ): Promise<BulkWriteResult> | void;\n  execute(\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\n    callback?: Callback<BulkWriteResult>\n  ): Promise<BulkWriteResult> | void {\n    callback =\n      typeof callback === 'function'\n        ? callback\n        : typeof options === 'function'\n        ? options\n        : undefined;\n    return maybeCallback(async () => {\n      options = options != null && typeof options !== 'function' ? options : {};\n\n      if (this.s.executed) {\n        throw new MongoBatchReExecutionError();\n      }\n\n      const writeConcern = WriteConcern.fromOptions(options);\n      if (writeConcern) {\n        this.s.writeConcern = writeConcern;\n      }\n\n      // If we have current batch\n      if (this.isOrdered) {\n        if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n      }\n      // If we have no operations in the bulk raise an error\n      if (this.s.batches.length === 0) {\n        throw new MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n      }\n\n      this.s.executed = true;\n      const finalOptions = { ...this.s.options, ...options };\n      const operation = new BulkWriteShimOperation(this, finalOptions);\n\n      return executeOperation(this.s.collection.s.db.s.client, operation);\n    }, callback);\n  }\n\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      callback(\n        new MongoBulkWriteError(\n          {\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          },\n          writeResult\n        )\n      );\n\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n  abstract addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this;\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\n\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch: Batch): boolean {\n  return batch.batchType === BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\n  return batch.batchType === BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\n  return batch.batchType === BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\n  let { currentOp } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}\n"]},"metadata":{},"sourceType":"script"}